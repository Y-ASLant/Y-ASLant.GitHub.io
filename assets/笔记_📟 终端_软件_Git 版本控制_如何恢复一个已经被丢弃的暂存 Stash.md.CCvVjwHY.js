import{_ as d,c as o,I as a,j as s,a as i,w as t,au as l,D as n,o as c}from"./chunks/framework.RMxno62p.js";const O=JSON.parse('{"title":"如何恢复一个已经被丢弃的暂存 Stash","description":"","frontmatter":{"tags":["开发","命令行/git","命令行/git/Stash","命令行/git/历史","命令行/git/操作","命令行/git/恢复","命令行/cut","命令行/grep","命令行/xargs","计算机/操作系统/Linux/命令行","开发/Git"]},"headers":[],"relativePath":"笔记/📟 终端/软件/Git 版本控制/如何恢复一个已经被丢弃的暂存 Stash.md","filePath":"笔记/📟 终端/软件/Git 版本控制/如何恢复一个已经被丢弃的暂存 Stash.md"}'),r={name:"笔记/📟 终端/软件/Git 版本控制/如何恢复一个已经被丢弃的暂存 Stash.md"},g=s("h1",{id:"如何恢复一个已经被丢弃的暂存-stash",tabindex:"-1"},[i("如何恢复一个已经被丢弃的暂存 Stash "),s("a",{class:"header-anchor",href:"#如何恢复一个已经被丢弃的暂存-stash","aria-label":'Permalink to "如何恢复一个已经被丢弃的暂存 Stash"'},"​")],-1),F=l('<p>最近在工作中经常需要来回切换分支并且 Stash 各种临时的不需要提交的，但是开发的时候需要修改的变更（比如为某个 Vue/React 组件进行开发的时候制作了一个页面来预览和测试组件），但是我有的时候会不小心把没有正确起名字的 Stash 也给全部丢弃掉，但当意识到需要找回这份 Stash 的时候去 Git Reflog 中翻寻的话又会因为有太多记录了而半天都找不到自己想要的东西，无奈之下就去 Google 上搜索了一下，然后偶然在 StackOverflow 中找到了这么一条非常有意思的命令来方便查找自己想要的、被丢弃的 Stash：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> fsck</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --unreachable</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> cut</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot; &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -f3</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> xargs</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --merges</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --no-walk</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --grep=</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">你要搜索的</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Stash</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 名称，Stash</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 一般默认以</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> WIP</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 开</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">头</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div>',2),C=l(`<h2 id="tl-dr" tabindex="-1">TL;DR <a class="header-anchor" href="#tl-dr" aria-label="Permalink to &quot;TL;DR&quot;">​</a></h2><p>如果你需要寻找你丢失的 Stash，直接运行上面的命令就好了，最后的 <code>--grep=&lt;你要搜索的 Stash 名称，Stash 一般默认以 WIP 开头&gt;</code> 是用来帮忙搜索 Stash 标题的，你可以去掉这个 <code>--grep</code> 参数，也可以把占位符换成你的 Stash 可能使用过的标题进行搜寻。对我个人而言我都会好好命名 Stash，或者直接用 WIP，所以对我而言使用 <code>WIP</code> 或者具体的名字去寻找会比较简单快速。</p><p>使用的效果是这样的：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">❯</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> fsck</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --unreachable</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> cut</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot; &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -f3</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> xargs</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --merges</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --no-walk</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --grep=WIP</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Checking</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> object</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> directories:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 100%</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (256/256), done.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Checking</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> objects:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 100%</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (82/82), done.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">commit</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 726b3be5de2fbc1e37496fee33d686bff1001bcb</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Merge:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 95e340e</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 3ec8098</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Author:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Ayaka</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Neko</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">neko@ayaka.mo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Date:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   Thu</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Nov</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 25</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 14:47:19</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2021</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> +0800</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    WIP</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> main:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 95e340e</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 小音更新了知识库:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 2021-11-02</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 11:52:35</span></span></code></pre></div><p>中间这段</p><blockquote><p>WIP on main: 95e340e 小音更新了知识库: 2021-11-02 11:52:35</p></blockquote><p>就是 Stash 曾经使用的标题了，你可以通过这段标题和日期时间找到你需要的 Stash。</p><p>最后把 <code>commit</code> 后面的 hash 复制出来使用下面的命令执行：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> stash</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> apply</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">commit_has</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p>比如：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> stash</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> apply</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 726b3be5de2fbc1e37496fee33d686bff1001bcb</span></span></code></pre></div><p>然后就能恢复 Stash 了！</p><p>🎉 恭喜，你现在找回了你想要的 Stash，可以继续回到工作上啦！</p><h2 id="解释" tabindex="-1">解释 <a class="header-anchor" href="#解释" aria-label="Permalink to &quot;解释&quot;">​</a></h2><p>那么接下来我们来了解一下为什么会有这样的命令和效果。在命令行里，命令与命令间可以通过被称之为管道符 <code>|</code> 的字符来传递信息，因此管道符可以将不同的命令的返回数据串联在一起，在接下来的讲解中我们会基于管道符 <code>|</code> 和被调用的命令本身拆开来逐个说明。</p><h3 id="第一段命令" tabindex="-1">第一段命令 <a class="header-anchor" href="#第一段命令" aria-label="Permalink to &quot;第一段命令&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> fsck</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --unreachable</span></span></code></pre></div><p><code>git fsck</code> 是命令本身，<code>--unreachable</code> 是参数。</p>`,18),y=s("li",null,[s("code",null,"git fsck"),i(" 是一个用来验证数据库中的对象的连接性和有效性的命令"),s("sup",{class:"footnote-ref"},[s("a",{href:"#fn1",id:"fnref1"},"[1]")]),i("（用人话来说：看看现在的 "),s("code",null,".git/object"),i(" 目录中所记录的「对象」们（可以理解为一个提交，一个 Stash 等等），验证一下这些「对象」和「对象」之间的关系）。")],-1),b=s("code",null,"--unreachable",-1),u=s("code",null,"git fsck",-1),f=s("em",null,"reachable",-1),m=s("em",null,"unreachable",-1),_=l(`<p>所以这个命令可以用来打印出我们目前 Git 仓库中已经<em>弄丢</em>的「对象」们，或者说，Stash 们。</p><p>它的输出可能长这样：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> fsck</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --unreachable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Checking</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> object</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> directories:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 100%</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (256/256), done.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Checking</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> objects:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 100%</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (82/82), done.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> blob</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 6180dc58dc7c3112fff1cdbb7852fbe4fe942b01</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tree</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 03c1f688f4749f5938180e96e19fe7e33e72b1ac</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> blob</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 2a4166ffc8cd6e72a03dba4df115f7aa65fdc990</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 4a81b846a25c459e8c4ec8ec0f9574e1853ed989</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> blob</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 67c1a30284ce9e50cf930347c9ba8f6be0dffedb</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tree</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 6f01ea3794e7eb040da9592b287f7e4bffa85793</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 5fc2505971797600dd926d786499d068d8343b9a</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tree</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 9702117312b9430e3004d9819d7a22b0c6e41e96</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tree</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> f642aab9b837713ddf31ede8b018bb46bc69ecb0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tree</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 2d8364d29f446ef00a4dff03ebbcb592236b5484</span></span></code></pre></div><h3 id="第二段命令" tabindex="-1">第二段命令 <a class="header-anchor" href="#第二段命令" aria-label="Permalink to &quot;第二段命令&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> commit</span></span></code></pre></div><p><code>grep</code> 是命令本身，<code>commit</code> 是传递给 <code>grep</code> 的参数。</p>`,6),A=s("code",null,"grep",-1),v=s("code",null,"man grep",-1),B=s("code",null,"grep",-1),E=s("code",null,"commit",-1),x=l(`<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> blob</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 6180dc58dc7c3112fff1cdbb7852fbe4fe942b01</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tree</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 03c1f688f4749f5938180e96e19fe7e33e72b1ac</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> blob</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 2a4166ffc8cd6e72a03dba4df115f7aa65fdc990</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 4a81b846a25c459e8c4ec8ec0f9574e1853ed989</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> blob</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 67c1a30284ce9e50cf930347c9ba8f6be0dffedb</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tree</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 6f01ea3794e7eb040da9592b287f7e4bffa85793</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 5fc2505971797600dd926d786499d068d8343b9a</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tree</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 9702117312b9430e3004d9819d7a22b0c6e41e96</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tree</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> f642aab9b837713ddf31ede8b018bb46bc69ecb0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tree</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 2d8364d29f446ef00a4dff03ebbcb592236b5484</span></span></code></pre></div><p>这样的话，那么 <code>grep commit</code> 命令在这里就可以帮我们把 <code>commit</code> 相关的行提取出来，长这样：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 4a81b846a25c459e8c4ec8ec0f9574e1853ed989</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 5fc2505971797600dd926d786499d068d8343b9a</span></span></code></pre></div><h3 id="第三段命令" tabindex="-1">第三段命令 <a class="header-anchor" href="#第三段命令" aria-label="Permalink to &quot;第三段命令&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">cut</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot; &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -f3</span></span></code></pre></div><p>这个就有点太晦涩难懂了。不过依然可以很好的理解：<code>cut</code> 是命令本身，<code>-d</code> 和 <code>-f</code> 都是参数。</p><p><code>cut</code> 是做什么的呢？<code>cut</code> 命令可以帮忙将特定文件，或者通过管道符 <code>|</code> 传输的文本切成多段。</p><ul><li><code>-d&quot; &quot;</code> 的 <code>-d</code> 是分隔符的意思，这里我们指定我们的分割符为 <code>&quot; &quot;</code>（1 个空格）。</li><li><code>-f3</code> 的 <code>-f</code> 是在分割后我们需要选择的字段名。比如这里我们用 <code>-d</code> 将之前的输出按 1 个空格进行切分后，选择了字段 3。这样说也许依然很晦涩难懂，不如我们在下面的例子中进行进一步的讲解。</li></ul><p>上一段命令的输出为：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 4a81b846a25c459e8c4ec8ec0f9574e1853ed989</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 5fc2505971797600dd926d786499d068d8343b9a</span></span></code></pre></div><p>这次我们把数据继续喂给 <code>cut</code>，于是能得到下面的输出：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">4a81b846a25c459e8c4ec8ec0f9574e1853ed989</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">5fc2505971797600dd926d786499d068d8343b9a</span></span></code></pre></div><p>这意味着我们将字符串切分为了</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;unreachable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;commit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;4a81b846a25c459e8c4ec8ec0f9574e1853ed989&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span></code></pre></div><p>这样的数组之后使用 <code>-f3</code> 选中了第三个元素，也就是最后一个元素，并且输出这个元素。</p><h3 id="第四段命令" tabindex="-1">第四段命令 <a class="header-anchor" href="#第四段命令" aria-label="Permalink to &quot;第四段命令&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">xargs</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --merges</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --no-walk</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --grep=WIP</span></span></code></pre></div><p><code>xargs</code> 是命令本身，<code>git log --merges --no-walk --grep=WIP</code> 是它的参数，但是这并不意味着 <code>xargs</code> 内置了 <code>git</code>，<code>git</code> 其实是被 <code>xargs</code> 调用的命令。还记得我们最开始提到过，管道符 <code>|</code> 可以将数据传递给其他的命令工具吗？这里我们需要把之前第三段命令的输出看作是 <code>xargs</code> 的实际参数。</p><p>那为什么我们会需要使用 <code>xargs</code> 呢？这是因为在使用 Unix / Linux 和通过命令行进行很多操作的时候都会遇到很多不支持管道符 <code>|</code> 来传入参数的命令工具，使用 <code>xargs</code> 可以很好的解决这个问题，虽然 <code>xargs</code> 的原始功能其实是<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>：</p><blockquote><p><strong>xargs</strong> reads items from the standard input, delimited by blanks (which can be protected with double or single quotes or a backslash) or newlines, and executes the <em>command</em> (default is <em>echo</em>) one or more times with any <em>initial-arguments</em> followed by items read from standard input.</p></blockquote><p>中文解释：</p><blockquote><p>xargs 从标准输入中读取以空格（可以用双引号、单引号或反斜线保护）或换行符分隔的条目，然后执行命令（默认为 echo）一次或多次，并在从标准输入读取的条目后面加上任何初始参数。</p></blockquote><p>但是实际上，你可以通过它这样的特性，通过给它输入一个多行的文本，文本中包含着需要执行的命令会需要的参数，然后 <code>xargs</code> 就会自动帮你展开成多个的参数传递给接受多个参数的命令，比如默认的 <code>echo</code>。</p><p>比如这里有个例子：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;Line 1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">Line 2</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">Line 3&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> xargs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Line</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Line</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Line</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 3</span></span></code></pre></div><p>它相当于帮你执行了</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;Line 1&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;Line 2&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;Line 3&#39;</span></span></code></pre></div><p>根据上面我们的解释，那我们可以理解为 <code>xargs</code> 将会接受我们在第三段命令中的输出，并且转换为单行多个参数传递给 <code>git log --merges --no-walk --grep=WIP</code> 命令，如果我们上面的输出是：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">4a81b846a25c459e8c4ec8ec0f9574e1853ed989</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">5fc2505971797600dd926d786499d068d8343b9a</span></span></code></pre></div><p>那么接下来 <code>xargs git log --merges --no-walk --grep=WIP</code> 命令的效果其实等同于：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --merges</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --no-walk</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --grep=WIP</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 4a81b846a25c459e8c4ec8ec0f9574e1853ed989</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 5fc2505971797600dd926d786499d068d8343b9a</span></span></code></pre></div><h3 id="第五段命令" tabindex="-1">第五段命令 <a class="header-anchor" href="#第五段命令" aria-label="Permalink to &quot;第五段命令&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --merges</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --no-walk</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --grep=WIP</span></span></code></pre></div><p>终于到了我们需要获得结果的时刻了！</p><p><code>git log</code> 是命令本身，<code>--merges</code> 是参数，<code>--no-walk</code> 是参数，<code>--grep=WIP</code> 也是参数：</p><ul><li><code>git log</code> 可以展示历史记录</li><li><code>--merges</code> 只输出合并记录</li><li><code>--no-walk</code> 只输出我们要求它输出的 commit（提交），而不去递归搜寻 commit（提交）的祖先</li><li><code>--grep</code> 用于在提交消息中进行搜索，<code>--grep=WIP</code> 表示只在提交记录中搜索提交消息匹配 <code>WIP</code> 字样的条目</li></ul><p>所以这段命令就是要求 Git 将我们找到的这些已经<em>丢失</em>的提交的记录，并且要求只包含合并的提交（Stash 其实是一种合并提交，所以这里我们希望找到 Stash 的话就只需要看合并提交就没问题啦），要求不用寻找提交的祖先，并且要求提交消息（也就是 Stash 的名称）匹配 <code>WIP</code> 的记录。</p><h2 id="结束" tabindex="-1">结束 <a class="header-anchor" href="#结束" aria-label="Permalink to &quot;结束&quot;">​</a></h2><p>这就是全部的命令说明和讲解啦，我感觉还是很巧妙的。你可以把它保存为一个脚本或者配置为 git alias 然后在需要的时候捞出来用！</p><p>其实不光是这个命令很有用，在我找到这个命令的回答里也有其他很多非常有意思的解法，有兴趣的话也可以去阅读和尝试看看！</p><p>祝你开发旅程顺利，永远都能找到你需要的提交，以及，记得不要在喝醉了或者嗑药的情况下执行危险的操作哦！</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2>`,42),D=s("hr",{class:"footnotes-sep"},null,-1),S={class:"footnotes"},P={class:"footnotes-list"},q={id:"fn1",class:"footnote-item"},I=s("a",{href:"#fnref1",class:"footnote-backref"},"↩︎",-1),w={id:"fn2",class:"footnote-item"},T=s("a",{href:"#fnref2",class:"footnote-backref"},"↩︎",-1);function N(G,W,L,V,j,R){const h=n("NolebasePageProperties"),e=n("VPNolebaseInlineLinkPreview"),p=n("NolebaseGitContributors"),k=n("NolebaseGitChangelog");return c(),o("div",null,[g,a(h),F,s("p",null,[i("来源："),a(e,{href:"https://stackoverflow.com/a/5879550/19954520",target:"_blank",rel:"noreferrer"},{default:t(()=>[i("recovery - How do I recover a dropped stash in Git? - Stack Overflow")]),_:1})]),C,s("ul",null,[y,s("li",null,[b,i(" 是 "),u,i(" 的一个参数，用来要求打印出目前记录过的「对象」里已经不能从任何参考节点到达的对象（也就是我们弄丢的这些 Stash，commit，branch，tag）。（有关 "),f,i(" 和 "),m,i(" 对象的知识，可以阅读"),a(e,{href:"https://git-scm.com/docs/gitglossary/#Documentation/gitglossary.txt-aiddefreachableareachable",target:"_blank",rel:"noreferrer"},{default:t(()=>[i("这里")]),_:1}),i("和"),a(e,{href:"https://git-scm.com/docs/gitglossary/#Documentation/gitglossary.txt-aiddefunreachableobjectaunreachableobject",target:"_blank",rel:"noreferrer"},{default:t(()=>[i("这里")]),_:1}),i("）")])]),_,s("p",null,[A,i(" 命令想必你已经很熟悉了，如果不熟悉，可以阅读以下 "),a(e,{href:"https://man7.org/linux/man-pages/man1/grep.1.html",target:"_blank",rel:"noreferrer"},{default:t(()=>[v]),_:1}),i("，或者觉得麻烦的话也可以看看"),a(e,{href:"https://zh.wikipedia.org/zh-tw/Grep",target:"_blank",rel:"noreferrer"},{default:t(()=>[i("Grep - 维基百科")]),_:1}),i("。简而言之，"),B,i(" 命令在这里的作用是在输入的文本数据流中搜索我们给它传递的 "),E,i(" 的字符串，并且把这些命中的行列举出来。如果我们的前一个输出是")]),x,s("ul",null,[s("li",null,[a(e,{href:"https://git-scm.com/docs/gitglossary/#Documentation",target:"_blank",rel:"noreferrer"},{default:t(()=>[i("Git - gitglossary Documentation (git-scm.com)")]),_:1})]),s("li",null,[a(e,{href:"https://stackoverflow.com/a/36671659/19954520",target:"_blank",rel:"noreferrer"},{default:t(()=>[i("git fsck: how --dangling vs. --unreachable vs. --lost-found differ? - Stack Overflow")]),_:1})]),s("li",null,[a(e,{href:"https://git-scm.com/docs/git-log",target:"_blank",rel:"noreferrer"},{default:t(()=>[i("Git - git-log Documentation")]),_:1})])]),a(p),a(k),D,s("section",S,[s("ol",P,[s("li",q,[s("p",null,[a(e,{href:"https://git-scm.com/docs/git-fsck/zh_HANS-CN#_%E6%8F%8F%E8%BF%B0",target:"_blank",rel:"noreferrer"},{default:t(()=>[i("Git - git-fsck Documentation (git-scm.com)")]),_:1}),i(),I])]),s("li",w,[s("p",null,[a(e,{href:"https://man7.org/linux/man-pages/man1/xargs.1.html",target:"_blank",rel:"noreferrer"},{default:t(()=>[i("xargs - Linux manual page")]),_:1}),i(),T])])])])])}const z=d(r,[["render",N]]);export{O as __pageData,z as default};
