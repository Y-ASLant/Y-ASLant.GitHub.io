import{_ as r,c as d,I as a,j as i,a as s,w as t,au as l,D as n,o}from"./chunks/framework.RMxno62p.js";const x=JSON.parse('{"title":"配置 GitLab CI 自动部署","description":"","frontmatter":{"tags":["网站/GitLab","开发/CICD","开发/CICD/GitLab-CI","开发/标记语言/YAML","操作系统/CentOS","命令行/yum","命令行/chmod","开发/DevOps","命令行/git","开发/标记语言/TOML","命令行","计算机/操作系统/Linux","计算机/操作系统/Linux/命令行","操作系统/Linux","开发/Git"]},"headers":[],"relativePath":"笔记/🛠️ 开发/🟢 持续集成 持续交付 CICD/GitLab/配置 GitLab CI CD 自动部署.md","filePath":"笔记/🛠️ 开发/🟢 持续集成 持续交付 CICD/GitLab/配置 GitLab CI CD 自动部署.md"}'),c={name:"笔记/🛠️ 开发/🟢 持续集成 持续交付 CICD/GitLab/配置 GitLab CI CD 自动部署.md"},g=i("h1",{id:"配置-gitlab-ci-自动部署",tabindex:"-1"},[s("配置 GitLab CI 自动部署 "),i("a",{class:"header-anchor",href:"#配置-gitlab-ci-自动部署","aria-label":'Permalink to "配置 GitLab CI 自动部署"'},"​")],-1),y=l("",6),u=l("",54),C=i("code",null,"CI/CD",-1),b=i("code",null,"流水线",-1),F=i("code",null,"CI lint",-1),m=l("",21);function A(E,_,B,v,f,q){const h=n("NolebasePageProperties"),e=n("VPNolebaseInlineLinkPreview"),p=n("NolebaseGitContributors"),k=n("NolebaseGitChangelog");return o(),d("div",null,[g,a(h),y,i("p",null,[s("一个放在项目根目录下的 yaml 文件，里面描述了 CI/CD 的触发条件和工作流程。 具体语法可以参考 "),a(e,{href:"https://docs.gitlab.com/ee/ci/yaml/index.html",target:"_blank",rel:"noreferrer"},{default:t(()=>[s("官方文档")]),_:1})]),u,i("p",null,[s("接下来我们参考 "),a(e,{href:"https://docs.gitlab.com/ee/ci/yaml/README.html",target:"_blank",rel:"noreferrer"},{default:t(()=>[s("官方文档")]),_:1}),s(" 的格式，在 .gitlab-ci.yml 文件写入要执行的步骤和触发条件。 编写完成后可以进入 GitLab 项目，然后选择 "),C,s(" -> "),b,s(" -> "),F,s("，打开**“验证您的GitLab CI配置”** 页面，在这里可以校验你的 .gitlab-ci.yml 文件语法是否正。")]),m,a(p),a(k)])}const L=r(c,[["render",A]]);export{x as __pageData,L as default};
