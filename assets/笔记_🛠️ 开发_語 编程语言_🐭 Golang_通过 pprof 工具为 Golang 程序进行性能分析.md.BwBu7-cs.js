import{_ as r,c as o,I as a,j as s,a as i,w as p,au as n,D as t,o as d}from"./chunks/framework.RMxno62p.js";const q=JSON.parse('{"title":"通过 pprof 工具为 Golang 程序进行性能分析","description":"","frontmatter":{"tags":["开发/语言/Golang","开发/语言/Golang/性能优化","开发/语言/Golang/Profiling","开发/语言/Golang/工具/pprof","命令行/go"]},"headers":[],"relativePath":"笔记/🛠️ 开发/語 编程语言/🐭 Golang/通过 pprof 工具为 Golang 程序进行性能分析.md","filePath":"笔记/🛠️ 开发/語 编程语言/🐭 Golang/通过 pprof 工具为 Golang 程序进行性能分析.md"}'),g={name:"笔记/🛠️ 开发/語 编程语言/🐭 Golang/通过 pprof 工具为 Golang 程序进行性能分析.md"},c=s("h1",{id:"通过-pprof-工具为-golang-程序进行性能分析",tabindex:"-1"},[i("通过 pprof 工具为 Golang 程序进行性能分析 "),s("a",{class:"header-anchor",href:"#通过-pprof-工具为-golang-程序进行性能分析","aria-label":'Permalink to "通过 pprof 工具为 Golang 程序进行性能分析"'},"​")],-1),F=n(`<h2 id="准备工作" tabindex="-1">准备工作 <a class="header-anchor" href="#准备工作" aria-label="Permalink to &quot;准备工作&quot;">​</a></h2><p>我们需要从我们的服务程序中提取程序的运行情况。Golang 提供了 <code>runtime/pprof</code> 和 <code>net/http/pprof</code> 两个库，分别应用在适合的场景中。</p><h3 id="一次性应用" tabindex="-1">一次性应用 <a class="header-anchor" href="#一次性应用" aria-label="Permalink to &quot;一次性应用&quot;">​</a></h3><p>如果你的应用是一次性的，运行一段时间就结束。那么最好的办法，就是在应用退出的时候把性能分析的报告保存到文件中，进行分析。对于这种情况，可以使用 <code>runtime/pprof</code> 库。</p><p>去除错误处理只需要三行内容，一般把部分内容写在 <code>main.go</code> 文件中，应用程序启动之后就开始执行：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> os</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Create</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">cpuprofile</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 其他代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    pprof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">StartCPUProfile</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    defer</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> pprof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">StopCPUProfile</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span></code></pre></div><p>应用执行结束后，就会生成一个文件，保存了我们的 CPU profiling 数据。</p><p>想要获得内存的数据，直接使用 WriteHeapProfile 就行，不用 start 和 stop 这两个步骤了：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> os</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Create</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">memprofile</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    pprof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">WriteHeapProfile</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Close</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span></code></pre></div><h3 id="服务型应用" tabindex="-1">服务型应用 <a class="header-anchor" href="#服务型应用" aria-label="Permalink to &quot;服务型应用&quot;">​</a></h3><p>如果你的应用是一直运行的，比如 web 应用，那么可以使用 <code>net/http/pprof</code> 库，它能够在提供 HTTP 服务进行分析。</p><h4 id="使用-http-defaultservemux" tabindex="-1">使用 <code>http.DefaultServeMux</code> <a class="header-anchor" href="#使用-http-defaultservemux" aria-label="Permalink to &quot;使用 \`http.DefaultServeMux\`&quot;">​</a></h4><p>在 import 块中导入 <code>net/http/pprof</code> 即可：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> _</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#98C379;">net/http/pprof</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span></code></pre></div><h4 id="使用-gin-框架或者是其他-http-封装库" tabindex="-1">使用 Gin 框架或者是其他 HTTP 封装库 <a class="header-anchor" href="#使用-gin-框架或者是其他-http-封装库" aria-label="Permalink to &quot;使用 Gin 框架或者是其他 HTTP 封装库&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    r</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> gin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Default</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    r</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">MethodGet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/debug/pprof/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">gin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">WrapF</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">pprof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Index</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    r</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">MethodGet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/debug/pprof/cmdline&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">gin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">WrapF</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">pprof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Cmdline</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    r</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">MethodGet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/debug/pprof/profile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">gin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">WrapF</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">pprof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Profile</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    r</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">MethodGet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/debug/pprof/symbol&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">gin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">WrapF</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">pprof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    r</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">MethodGet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/debug/pprof/trace&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">gin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">WrapF</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">pprof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Trace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))</span></span></code></pre></div><h2 id="进行分析" tabindex="-1">进行分析 <a class="header-anchor" href="#进行分析" aria-label="Permalink to &quot;进行分析&quot;">​</a></h2><h3 id="直接使用-pprof" tabindex="-1">直接使用 <code>pprof</code> <a class="header-anchor" href="#直接使用-pprof" aria-label="Permalink to &quot;直接使用 \`pprof\`&quot;">​</a></h3><p>有两种方式可以方便我们进行分析，第一种就是直接使用 <code>go</code> 自带的 <code>pprof</code> 命令行工具请求 <code>pprof</code> 的接口：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tool</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pprof</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;localhost:8080/debug/pprof/profile&quot;</span></span></code></pre></div><p>来进行 CPU Profiling。</p><p>请求之后将会进入一个交互式的命令行，这个时候可以通过在这个交互式命令行窗口中输入 <code>top</code> 来查看排名最前的数据结果。</p><p>比如，如果想要分析 <code>heap</code> <code>profile</code> 数据，查看现在 <code>heap</code> 上的内存开销：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro has-highlighted vp-code" tabindex="0"><code><span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">❯</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> go</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tool</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pprof</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ~/Downloads/heap</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">File:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> insights-bot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Type:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> inuse_space</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Time:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Dec</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 11,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2023</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 12:01am</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (CST)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Entering</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> interactive</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (type </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;help&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> commands,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;o&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> options</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">pprof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">top</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Showing</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nodes</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> accounting</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 12127.38kB,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 92.21%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 13151.42kB</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> total</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Showing</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> top</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nodes</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> out</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> of</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 82</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">      flat</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  flat%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   sum%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">        cum</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   cum%</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> 5768.23kB</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 43.86%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 43.86%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  7925.17kB</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 60.26%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  github.com/pkoukk/tiktoken-go.loadTiktokenBpe</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> 1644.93kB</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 12.51%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 56.37%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  1644.93kB</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 12.51%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  strings.genSplit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  809.97kB</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  6.16%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 62.53%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   809.97kB</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  6.16%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  bufio.NewWriterSize</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  768.26kB</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  5.84%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 68.37%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   768.26kB</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  5.84%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  go.uber.org/zap/zapcore.newCounters</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  561.50kB</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  4.27%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 72.64%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   561.50kB</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  4.27%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  golang.org/x/net/html.map.init.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  517.33kB</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  3.93%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 76.57%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   517.33kB</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  3.93%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  github.com/gookit/color.init256ToHexMap</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  517.33kB</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  3.93%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 80.51%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   517.33kB</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  3.93%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  regexp/syntax.</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">compiler)</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">.inst</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  515.38kB</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  3.92%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 84.42%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   515.38kB</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  3.92%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  ariga.io/atlas/schemahcl.WithTypes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  512.31kB</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  3.90%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 88.32%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   512.31kB</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  3.90%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  regexp.onePassCopy</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  512.14kB</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  3.89%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 92.21%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   512.14kB</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  3.89%</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  text/template/parse.New</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">pprof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><p>让我们先回到命令行的使用上，默认情况下，这样的流程会进行 30s，这是因为 <code>pprof</code> 暴露的接口的处理器正在对程序的 CPU 和相关计算资源的用量进行快照采集，静静等待结束之后 <code>pprof</code> 就会进入交互式界面让我们交互式浏览 <code>pprof</code> 的结果。 当然你完全可以修改这样的默认行为，你可以要求 <code>pprof</code> 的快照时长延长为 60s。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tool</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pprof</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;localhost:8080/debug/pprof/profile?seconds=60&quot;</span></span></code></pre></div>`,26),y={class:"note custom-block github-alert"},C=n('<p class="custom-block-title">快照？`pprof` 的底层原理</p><p></p><p>简而言之，快照在这里的含义其实并不是简单地将 Profiling 的过程中这段时间的函数调用和调用耗时快照下来，更复杂的是，<code>pprof</code> 其实是在默认配置情况下的 30s 的时间窗口内，将这段时间范围内的高耗时函数调用，以及计算流程像是「拍个照片」一样记录下来。</p><p>复杂一点说，<code>pprof</code> 命令行将会在被执行的时候自动找参数提供的 Profiling 接口（在上面的例子中则为 <code>localhost:8080/debug/pprof/profile</code>）发起 <code>GET</code> 请求，在 <code>debug/pprof/profile</code> 接收到请求之后，将会高耗时函数调用，内存分配，符号申请，栈内栈外的信息做提取和快照操作，然后打包返回一个 <code>pprof</code> 可以读取和分析的二进制数据包，最终到交互式的 <code>pprof</code> 操作和方便用户和开发者观测这些关键的、足够显眼的调用栈和消耗。</p><p>因此，如果你想要通过 <code>pprof</code> 去细致入微地测量每个函数的调用的话，是行不通的，因为他们对于 <code>pprof</code> 而言不够显眼，换句话说，是占用的计算资源不如别的函数，这个时候 <code>pprof</code> 接口所返回的 Profiling 数据中是不会包含这些信息的。</p>',5),B=n('<p>如果有二进制文件，或者想看 <code>pprof</code> 的源代码映射的话，也可以在第二个参数中指定正在 <code>pprof</code> 的二进制文件：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tool</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pprof</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ./main</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;localhost:8080/debug/pprof/profile?seconds=60&quot;</span></span></code></pre></div><h3 id="先缓存下来再-pprof" tabindex="-1">先缓存下来再 <code>pprof</code> <a class="header-anchor" href="#先缓存下来再-pprof" aria-label="Permalink to &quot;先缓存下来再 `pprof`&quot;">​</a></h3><p>在上面的例子中介绍的 <code>pprof</code> 的使用方法都是非常快捷临时的用法，很多时候我们不能每次都去环境里面安装 <code>go</code> 或者是在不保存结果的情况下对 <code>pprof</code> 接口返回的结果进行分析，这个时候需要我们通过别的方式实现这样的功能。</p><p>正如在 <code>pprof</code> 的底层原理中讲述的</p><blockquote><p><code>pprof</code> 命令行将会在被执行的时候自动找参数提供的 Profiling 接口（在上面的例子中则为 <code>localhost:8080/debug/pprof/profile</code>）发起 <code>GET</code> 请求，在 <code>debug/pprof/profile</code> 接收到请求之后，将会高耗时函数调用，内存分配，符号申请，栈内栈外的信息做提取和快照操作，然后打包返回一个 <code>pprof</code> 可以读取和分析的二进制数据包</p></blockquote><p>所以你完全可以通过诸如 <code>wget</code> 和 <code>curl</code> 这样别的 HTTP 客户端对接口进行 <code>GET</code> 请求并将 <code>pprof</code> 可读取和分析的二进制存储到本地，然后在有 <code>pprof</code> 的环境中分析和执行进一步的 debug 和挖掘操作，或者是方便之后的二次复盘和数据对比：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> localhost:8080/debug/pprof/profile</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> localhost:8080/debug/pprof/profile</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -O</span></span></code></pre></div><p>如果是从 Docker 容器中获取的 <code>pprof</code> <code>profile</code> 资料文件，可以通过下面的命令复制到宿主机：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> cp</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">container</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> has</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">path</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pprof</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> profile</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> fil</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ~/</span></span></code></pre></div><p>然后再执行</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tool</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pprof</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">path</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pprof</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> profile</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> fil</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><h2 id="可视化分析" tabindex="-1">可视化分析 <a class="header-anchor" href="#可视化分析" aria-label="Permalink to &quot;可视化分析&quot;">​</a></h2><p>使用 pprof 工具可以直接输出一个可运行的网页，在网页中可以选择查看调用统计、调用次序、火焰图等。</p><h3 id="安装额外的依赖" tabindex="-1">安装额外的依赖 <a class="header-anchor" href="#安装额外的依赖" aria-label="Permalink to &quot;安装额外的依赖&quot;">​</a></h3><p>要渲染这些图片，我们还需要在 macOS 上安装 graphviz：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> graphviz</span></span></code></pre></div><h3 id="输入-profile-文件并打开一个网页服务器" tabindex="-1">输入 profile 文件并打开一个网页服务器 <a class="header-anchor" href="#输入-profile-文件并打开一个网页服务器" aria-label="Permalink to &quot;输入 profile 文件并打开一个网页服务器&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tool</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pprof</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -http=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;:8080&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ./main</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ~/pprof/pprof.main.samples.cpu.001.pb.gz</span></span></code></pre></div><p>这个时候在浏览器中打开 <code>http://localhost:8080</code>，就可以看到性能分析的数据了。</p><h2 id="延伸阅读" tabindex="-1">延伸阅读 <a class="header-anchor" href="#延伸阅读" aria-label="Permalink to &quot;延伸阅读&quot;">​</a></h2>',22),E=s("h2",{id:"相关资源",tabindex:"-1"},[i("相关资源 "),s("a",{class:"header-anchor",href:"#相关资源","aria-label":'Permalink to "相关资源"'},"​")],-1);function f(u,A,b,m,_,v){const l=t("NolebasePageProperties"),h=t("VPNolebaseInlineLinkPreview"),e=t("NolebaseGitContributors"),k=t("NolebaseGitChangelog");return d(),o("div",null,[c,a(l),F,s("div",y,[C,s("p",null,[i("对于精确测量函数调用的需求，请使用 Jeager 或者我撰写的 "),a(h,{href:"https://github.com/nekomeowww/elapsing",target:"_blank",rel:"noreferrer"},{default:p(()=>[i("nekomeowww/elapsing")]),_:1}),i(" 库来对逐个函数和调用栈进行可观测分析。")])]),B,s("p",null,[a(h,{href:"https://cizixs.com/2017/09/11/profiling-golang-program/",target:"_blank",rel:"noreferrer"},{default:p(()=>[i("使用 pprof 和火焰图调试 golang 应用 | Cizixs Write Here")]),_:1})]),s("p",null,[a(h,{href:"https://segmentfault.com/a/1190000016412013",target:"_blank",rel:"noreferrer"},{default:p(()=>[i("Golang 大杀器之性能剖析 PProf - SegmentFault 思否")]),_:1})]),s("p",null,[a(h,{href:"https://www.matoski.com/article/golang-profiling-flamegraphs/",target:"_blank",rel:"noreferrer"},{default:p(()=>[i("Golang remote profiling and flamegraphs · matoski.com")]),_:1})]),E,s("p",null,[a(h,{href:"https://graphviz.org/download/",target:"_blank",rel:"noreferrer"},{default:p(()=>[i("Download | Graphviz")]),_:1})]),a(e),a(k)])}const x=r(g,[["render",f]]);export{q as __pageData,x as default};
