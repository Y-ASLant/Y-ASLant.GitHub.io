import{_ as n,c as l,I as d,j as t,w as s,a as o,au as h,D as e,o as g}from"./chunks/framework.RMxno62p.js";const G=JSON.parse('{"title":"不同的添加到暂存的 git add 命令有什么区别？","description":"","frontmatter":{"tags":["开发/Git","命令行/git"]},"headers":[],"relativePath":"笔记/📟 终端/软件/Git 版本控制/不同的添加到暂存的 git add 命令有什么区别？.md","filePath":"笔记/📟 终端/软件/Git 版本控制/不同的添加到暂存的 git add 命令有什么区别？.md"}'),_={name:"笔记/📟 终端/软件/Git 版本控制/不同的添加到暂存的 git add 命令有什么区别？.md"},b=t("h1",{id:"不同的添加到暂存的-git-add-命令有什么区别",tabindex:"-1"},[o("不同的添加到暂存的 "),t("code",null,"git add"),o(" 命令有什么区别？ "),t("a",{class:"header-anchor",href:"#不同的添加到暂存的-git-add-命令有什么区别","aria-label":'Permalink to "不同的添加到暂存的 `git add` 命令有什么区别？"'},"​")],-1),u=h('<ul><li><code>git add -A</code></li><li><code>git add .</code></li><li><code>git add -u</code></li></ul><p>这三者都有什么区别？又各自有什么坑？</p><h2 id="git-version-1-x" tabindex="-1">Git Version 1.x <a class="header-anchor" href="#git-version-1-x" aria-label="Permalink to &quot;Git Version 1.x&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>新文件</th><th>修改文件</th><th>删除文件</th><th>说明</th></tr></thead><tbody><tr><td><code>git add -A</code></td><td>✔️</td><td>✔️</td><td>✔️</td><td>暂存所有（新建、修改、删除的）文件</td></tr><tr><td><code>git add .</code></td><td>✔️</td><td>✔️</td><td>❌</td><td>只暂存新文件和修改文件</td></tr><tr><td><code>git add -u</code></td><td>❌</td><td>✔️</td><td>✔️</td><td>只暂存修改文件和删除文件</td></tr></tbody></table><h2 id="git-version-2-x" tabindex="-1">Git Version 2.x <a class="header-anchor" href="#git-version-2-x" aria-label="Permalink to &quot;Git Version 2.x&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>新文件</th><th>修改文件</th><th>删除文件</th><th>说明</th></tr></thead><tbody><tr><td><code>git add -A</code></td><td>✔️</td><td>✔️</td><td>✔️</td><td>暂存所有（新建、修改、删除的）文件</td></tr><tr><td><code>git add .</code></td><td>✔️</td><td>✔️</td><td>✔️</td><td>暂存当前目录下所有（新建、修改、删除的）文件</td></tr><tr><td><code>git add --ignore-removal .</code></td><td>✔️</td><td>✔️</td><td>❌</td><td>只暂存新文件和修改文件</td></tr><tr><td><code>git add -u</code></td><td>❌</td><td>✔️</td><td>✔️</td><td>只暂存修改文件和删除文件</td></tr></tbody></table><h2 id="已知的坑" tabindex="-1">已知的坑 <a class="header-anchor" href="#已知的坑" aria-label="Permalink to &quot;已知的坑&quot;">​</a></h2><ol><li>对于未正确配置 <code>.gitignore</code> 和在 <code>git --config -g</code> 的 <code>.gitignore</code> 的系统或者 <code>git</code> 的运行环境而言，如果直接使用 <code>git add -A</code> 的话，会出现把 <code>.DS_Store</code> 这样的无效的文件或者 <code>Trash-0</code> 这样的会有权限异常或者已经不存在或者有 symlink 的文件或者目录添加到 <code>.git</code> 的问题，往往 <code>git add -A</code> 执行的时候就会出现问题，这对于集成了 <code>git clone</code> 和 <code>git pull</code> 的工具而言会比较 critical；</li><li>对于未正确配置 <code>.gitignore</code> 的 <code>git</code> 仓库，如果背后接入了 NFS 或者自定义的 FileSystem（文件系统），临时生成的文件：超大的 log，转换过的数据集，模型权重，或者 <code>huggingface-cli</code> 下载的模型，在使用 <code>git add -A</code> 的时候可能会遭遇 NFS 的性能瓶颈。</li></ol><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2>',9);function m(f,p,x,P,N,k){const a=e("NolebasePageProperties"),i=e("VPNolebaseInlineLinkPreview"),r=e("NolebaseGitContributors"),c=e("NolebaseGitChangelog");return g(),l("div",null,[b,d(a),u,t("ul",null,[t("li",null,[d(i,{href:"https://stackoverflow.com/a/26039014/19954520",target:"_blank",rel:"noreferrer"},{default:s(()=>[o('git add - Difference between "git add -A" and "git add ." - Stack Overflow')]),_:1})])]),d(r),d(c)])}const V=n(_,[["render",m]]);export{G as __pageData,V as default};
