import{_ as l,c as d,I as i,j as e,a as n,au as h,D as s,o as c}from"./chunks/framework.RMxno62p.js";const A=JSON.parse('{"title":"MySQL 规范","description":"","frontmatter":{"tags":["开发/数据/数据库","计算机/数据库/mysql","规范"]},"headers":[],"relativePath":"笔记/🛠️ 开发/🗂 数据库/关系型数据库 Relational DB/📊 MySQL/MySQL 规范.md","filePath":"笔记/🛠️ 开发/🗂 数据库/关系型数据库 Relational DB/📊 MySQL/MySQL 规范.md"}'),p={name:"笔记/🛠️ 开发/🗂 数据库/关系型数据库 Relational DB/📊 MySQL/MySQL 规范.md"},r=e("h1",{id:"mysql-规范",tabindex:"-1"},[n("MySQL 规范 "),e("a",{class:"header-anchor",href:"#mysql-规范","aria-label":'Permalink to "MySQL 规范"'},"​")],-1),k=h(`<h2 id="mysql-编写规范" tabindex="-1">MySQL 编写规范 <a class="header-anchor" href="#mysql-编写规范" aria-label="Permalink to &quot;MySQL 编写规范&quot;">​</a></h2><ul><li><p>【<strong>强制</strong>】使用大写关键字</p></li><li><p>【<strong>强制</strong>】使用 <code>COUNT(*)</code>，其为 SQL92 定义的标准统计行数语法</p></li><li><p>【<strong>强制</strong>】<code>COUNT(DISTINCT col)</code> 计算该列出 NULL 之外的不重复行数，注 <code>COUNT(DISTINCT col1, col2)</code> 如果其中一列全为 NULL，那么即使另一列有不同的值，也返回为 0。</p></li><li><p>【<strong>强制</strong>】当某一列的值全是 NULL 时， <code>COUNT(col)</code> 的返回结果为 0，但 <code>SUM(col)</code> 的返回结果为 NULL，因此使用 <code>SUM()</code> 时需注意 NPE 问题。</p></li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    -- 正例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> IF</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">ISNULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">SUM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(col)), </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">SUM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(col)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><ul><li>【<strong>强制</strong>】使用 <code>ISNULL()</code> 来判断是否为 NULL 值。注意： NULL 与任何值的直接比较都为 NULL。</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> NULL</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> -- NULL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> NULL</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> -- NULL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> -- NULL</span></span></code></pre></div><ul><li><p>【<strong>强制</strong>】使用 <code>&lt;&gt;</code> 作为“不等于”比较符。</p></li><li><p>【<strong>强制</strong>】在代码中写分页查询逻辑时，若 count 为 0 应直接返回，避免执行后面的分页语句。</p></li><li><p>【<strong>强制</strong>】不得使用外键与级联，一切外键概念必须在应用层解决。</p><p><strong>说明：</strong> 主键和外键：学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。 级联更新：如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，则为级联更新。</p><p><strong>原因：</strong> 外键与级联更新适用于单机低并发，不适合分布式、高并发集群； 级联更新是强阻塞，存在数据库更新风暴的风险； 外键影响数据库的插入速度。</p></li><li><p>【<strong>强制</strong>】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</p></li><li><p>【<strong>强制</strong>】数据订正时，删除和修改记录时，要先 <code>SELECT</code>，避免出现误删除，确认无误才能执行更新语句。 <strong>例外</strong>：如果需要对某个值进行加减计算，可以直接 <code>UPDATE</code> 并必须带上相关的 <code>WHERE</code> 限制</p></li><li><p>【<strong>特别强制</strong>】查询语句至少要达到 range 级别，要求是 ref 级别，如果可以是 consts 最好。（这里是指 explain 查询语句时的 type 值）</p></li><li><p>【推荐】<code>IN</code> 操作能避免则避免，若实在避免不了，需要仔细评估 <code>IN</code> 后边的集合元素数量，控制在 1000 个之内 。</p></li><li><p>【参考】 如果有全球化需要，使用字符集 <code>utf-8</code> 编码。并使用下列两种排序规则：</p><ul><li><p>不区分大小写：<code>utf8_general_ci</code></p></li><li><p>区分大小写：<code>utf8_bin</code></p><p>注意字符统计函数</p></li></ul></li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> LENGTH</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;轻松工作&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-- 返回 12</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> CHARACTER_LENGTH(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;轻松工作&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-- 返回 4</span></span></code></pre></div><p>如果要使用表情，那么使用 <code>utfmb4</code> 来进行存储，注意它与 <code>utf-8</code> 编码的区别。</p><p>如果需要区分大小写查询，请使用 <code>utf8_bin</code></p><ul><li>【参考】 <code>TRUNCATE TABLE</code> 比 <code>DELETE</code> 速度快，且使用的系统和事务日志资源少。但 <code>TRUNCATE</code> 无事务且不触发 trigger，有可能造成事故，故不建议在开发代码中使用此语句。 说明： <code>TRUNCATE TABLE</code> 在功能上与不带 <code>WHERE</code> 子句的 <code>DELETE</code> 语句相同。</li></ul><h2 id="建库规范" tabindex="-1">建库规范 <a class="header-anchor" href="#建库规范" aria-label="Permalink to &quot;建库规范&quot;">​</a></h2><p>为了避免同一个实例（连接）下撞库名的问题，库名需要按数据库连接名称（实例名称）添加前缀。</p><h2 id="建表规范" tabindex="-1">建表规范 <a class="header-anchor" href="#建表规范" aria-label="Permalink to &quot;建表规范&quot;">​</a></h2><h3 id="字段命名" tabindex="-1">字段命名 <a class="header-anchor" href="#字段命名" aria-label="Permalink to &quot;字段命名&quot;">​</a></h3><p>所有数据表需要拥有创建时间和修改时间两个字段，若表中记录有软删除需求，创建删除时间字段，当删除时间字段值不为 0 时视作软删除。也可以遵循 Gorm 默认约定的 <code>deleted_at IS NOT NULL</code> 规则，不过需要注意的是，该情况下必须给 <code>deleted_at</code> 配置索引。</p><p>库中记录时间字段类型使用 <code>datetime</code> 或是 <code>bigint(20)</code>，字段名称使用 <code>&lt;操作的过去式&gt;_at</code> 进行命名，如 <code>created_at</code>、<code>updated_at</code>、<code>deleted_at</code>。对于用户 ID 字段，若不为主键（<code>id</code>），则字段名使用 <code>user_id</code>，若需要「过期时间」或者「开始时间」字段，应遵循 <code>&lt;发生动作的一般现在时&gt;_at</code> 进行命名，比如过期对应 <code>expire</code>，则字段就应该命名为 <code>expires_at</code>；开始对应 <code>starts</code>，则字段就应该命名为 <code>starts_at</code>。</p><h3 id="字段类型" tabindex="-1">字段类型 <a class="header-anchor" href="#字段类型" aria-label="Permalink to &quot;字段类型&quot;">​</a></h3><p><code>id</code>、<code>created_at</code>、<code>updated_at</code> 字段类型需为 <code>bigint(20)</code>，一律不使用 <code>unsigned</code>，其他等同 <code>id</code> 或时间戳的字段也需如此。存储 IP 地址的字段为了支持 IPv6，需要设置其结构为 <code>varchar(50) NOT NULL</code>。所有字段若不为唯一索引，则都需要设置为 <code>NOT NULL</code>，字符型默认值一般为为空字符串，数字型一般设置为 <code>0</code>。</p><h3 id="字段顺序" tabindex="-1">字段顺序 <a class="header-anchor" href="#字段顺序" aria-label="Permalink to &quot;字段顺序&quot;">​</a></h3><p>建表时字段先后顺序一般为 <code>id</code>、创建时间、更新时间，删除时间（若有），具体业务相关字段排在后面。若之后添加字段也遵循末尾添加原则，避免影响上下游使用（如 DTS 的数据订阅）</p><h3 id="索引" tabindex="-1">索引 <a class="header-anchor" href="#索引" aria-label="Permalink to &quot;索引&quot;">​</a></h3><p>创建数据表时，需要根据需求添加相关索引。表中的 <code>updated_at</code> 字段必须添加索引（方便日后导数据）。 所有索引名均使用小写，普通索引名采用 <code>idx_</code> 开头，并跟上字段名小写（省略 <code>_</code>）。例如：为字段 <code>user_id</code> 建立普通索引，索引名：<code>idx_userid</code>，唯一索引（UNIQUE）使用 <code>uk_</code> 开头，并跟上字段名小写（省略 <code>_</code>）。例如：为字段 <code>user_id</code> 建立普通索引，索引名：<code>uk_userid</code>。若对多个字段建立联合索引，则依次跟上相应的字段名，例如：为 <code>user_id</code> 及 <code>updated_at</code> 建立联合索引，则索引名为：<code>idx_userid_updated_at</code>。</p><h3 id="表名" tabindex="-1">表名 <a class="header-anchor" href="#表名" aria-label="Permalink to &quot;表名&quot;">​</a></h3><p>建表表名，一般性业务以自有前缀开头。比如：</p><ul><li>数字资产可以是 <code>da_</code> 开头</li><li>用户以 <code>user_</code> 开头</li><li>统计以 <code>statistics_</code> 开头</li><li>临时表以 <code>temp_</code> 开头（需注明何时删除）</li><li>复制的表以 <code>copy_</code> 开头并以 <strong>日期时间</strong> 符合 <code>202001011201</code> 格式的 <code>_&lt;日期时间&gt;</code> 结尾。（如 <code>test</code> 表复制多个使用 <code>copy_test_202001011200</code>、<code>copy_test_202001011201</code> 等等）</li></ul><h3 id="表赋权" tabindex="-1">表赋权 <a class="header-anchor" href="#表赋权" aria-label="Permalink to &quot;表赋权&quot;">​</a></h3><p>在 PR 中书写 SQL 时，对表结构的修改需要加上赋权语句，如：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">GRANT</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> INSERT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">DELETE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">表名</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> to</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">用户</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span></span></code></pre></div>`,28);function g(y,D,u,_,C,L){const a=s("NolebasePageProperties"),t=s("NolebaseGitContributors"),o=s("NolebaseGitChangelog");return c(),d("div",null,[r,i(a),k,i(t),i(o)])}const E=l(p,[["render",g]]);export{A as __pageData,E as default};
