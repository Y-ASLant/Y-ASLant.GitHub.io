import{_ as d,c as r,I as a,j as i,a as s,w as t,au as l,D as h,o}from"./chunks/framework.RMxno62p.js";const K=JSON.parse('{"title":"Vite 部署","description":"","frontmatter":{},"headers":[],"relativePath":"笔记/🛠️ 开发/Vite 部署.md","filePath":"笔记/🛠️ 开发/Vite 部署.md"}'),g={name:"笔记/🛠️ 开发/Vite 部署.md"},c=i("h1",{id:"vite-部署",tabindex:"-1"},[s("Vite 部署 "),i("a",{class:"header-anchor",href:"#vite-部署","aria-label":'Permalink to "Vite 部署"'},"​")],-1),y=i("h2",{id:"安装和配置",tabindex:"-1"},[s("安装和配置 "),i("a",{class:"header-anchor",href:"#安装和配置","aria-label":'Permalink to "安装和配置"'},"​")],-1),B=i("h3",{id:"安装前置软件",tabindex:"-1"},[s("安装前置软件 "),i("a",{class:"header-anchor",href:"#安装前置软件","aria-label":'Permalink to "安装前置软件"'},"​")],-1),C=i("code",null,"yum",-1),F=i("code",null,"dnf",-1),A=i("li",null,"优先安装 epel-release（一个很大的软件库源，安装后可以搜索和安装更多的软件包）",-1),D=i("li",null,"更新整个软件包列表缓存和系统",-1),E=i("li",null,"-y 参数表示无需询问是否安装，直接静默安装",-1),u=l(`<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> yum</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> epel-release</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -y</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> yum</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -y</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> yum</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nginx</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> vim</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -y</span></span></code></pre></div><p>如果此处提示找不到 nginx，我们需要手动添加一下 nginx 官方的软件源</p><h4 id="调整-nginx-软件源" tabindex="-1">调整 Nginx 软件源 <a class="header-anchor" href="#调整-nginx-软件源" aria-label="Permalink to &quot;调整 Nginx 软件源&quot;">​</a></h4><p>创建一个 nginx.repo 文件并且写入 nginx 官方源配置：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> vim</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /etc/yum.repos.d/nginx.repo</span></span></code></pre></div><p>nginx.repo 内容，其中需要替换一些字符串： 把 <code>&lt;OS&gt;</code> 替换为发行版，比如 rhel，或者 centos 把 <code>&lt;OSRELEASE&gt;</code> 替换为发行版的大版本号，比如 <code>6</code>, <code>6._x_</code>, <code>7</code>, <code>7._x_</code></p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">[nginx]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">nginx repo</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">baseurl</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">https://nginx.org/packages/mainline/&lt;OS&gt;/&lt;OSRELEASE&gt;/$basearch/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">gpgcheck</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">1</span></span></code></pre></div><p>比如 CentOS7 的话可以这样写</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">[nginx]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">nginx repo</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">baseurl</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">https://nginx.org/packages/mainline/centos/7/$basearch/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">gpgcheck</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">1</span></span></code></pre></div><p>编辑之后输入 <code>:wq</code> 退出</p><p>运行下面的命令来更新软件源和系统</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> yum</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> update</span></span></code></pre></div><p>再次尝试安装</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> yum</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nginx</span></span></code></pre></div><p>如果还是不行，可以选择手动编译</p><h4 id="手动编译-nginx" tabindex="-1">手动编译 Nginx <a class="header-anchor" href="#手动编译-nginx" aria-label="Permalink to &quot;手动编译 Nginx&quot;">​</a></h4><p>安装编译需要的依赖包</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> gcc-c++</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pcre</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pcre-devel</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> zlib</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> zlib-devel</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> openssl-devel</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> libxml2</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> libxml2-devel</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> libxslt</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> libxslt-devel</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> gd-devel</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> perl-devel</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> perl-ExtUtils-Embed</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> GeoIP</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> GeoIP-devel</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> GeoIP-data</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> gperftools-devel</span></span></code></pre></div><p>使用 <code>wget</code> 命令下载 nginx 的源码</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> http://nginx.org/download/nginx-1.20.1.tar.gz</span></span></code></pre></div><h4 id="安装-node-js" tabindex="-1">安装 Node.js <a class="header-anchor" href="#安装-node-js" aria-label="Permalink to &quot;安装 Node.js&quot;">​</a></h4><p>使用 <code>curl</code> 命令下载并导入 Node14 仓库和配置（和下面的 Node16 二选一）</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -fsSL</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> https://rpm.nodesource.com/setup_14.x</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> bash</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> -</span></span></code></pre></div><p>使用 <code>curl</code> 命令下载并导入 Node16 仓库和配置（和上面的 Node14 二选一）</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -fsSL</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> https://rpm.nodesource.com/setup_16.x</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> bash</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> -</span></span></code></pre></div><p>执行完之后执行安装 nodejs 本体：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> yum</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nodejs</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> gcc-c++</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> make</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -y</span></span></code></pre></div><p>安装 pnpm：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pnpm</span></span></code></pre></div><h3 id="设定-nginx-服务为开机自启-并且开始运行" tabindex="-1">设定 Nginx 服务为开机自启，并且开始运行 <a class="header-anchor" href="#设定-nginx-服务为开机自启-并且开始运行" aria-label="Permalink to &quot;设定 Nginx 服务为开机自启，并且开始运行&quot;">​</a></h3><p>使用 <code>systemctl</code> 设定开机自启和运行</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nginx</span></span></code></pre></div><p>运行后应该可以从 <code>http://IP:80</code> 的访问到初始的网站 如果访问不到，可以看一下防火墙配置</p><h3 id="防火墙配置" tabindex="-1">防火墙配置 <a class="header-anchor" href="#防火墙配置" aria-label="Permalink to &quot;防火墙配置&quot;">​</a></h3><h4 id="检查-iptables" tabindex="-1">检查 <code>iptables</code> <a class="header-anchor" href="#检查-iptables" aria-label="Permalink to &quot;检查 \`iptables\`&quot;">​</a></h4><ol><li>先检查 <code>iptables</code>（老牌防火墙规则配置软件）是否在运行</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> status</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> iptables</span></span></code></pre></div><p>如果运行命令后提示 <code>Unit iptables.service could not be found.</code> 则表示服务不存在 如果找到了服务的话会有这样的提示：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">●</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> iptables.service</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> iptables</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">   Loaded:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> loaded</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (/usr/lib/systemd/system/iptables.service; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">vendor</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> preset:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">   Active:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> inactive</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (dead)</span></span></code></pre></div><p>第三行会有一个 Active 字段，如果结尾是 dead 则表示不在运行，否则会有绿色的 <code>Active: active (running)</code> 字样</p><p>如果正在运行的话可以使用以下命令允许 80 端口流量： 以下命令的含义是： <strong>使用 iptables 命令添加允许（ACCEPT） 80 端口的 TCP 流量</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> iptables</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -I</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> INPUT</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tcp</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --dport</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 80</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -j</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ACCEPT</span></span></code></pre></div><h4 id="检查-firewalld" tabindex="-1">检查 <code>firewalld</code> <a class="header-anchor" href="#检查-firewalld" aria-label="Permalink to &quot;检查 \`firewalld\`&quot;">​</a></h4><ol start="2"><li>检查 <code>firewalld</code> 是否在运行</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> status</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> firewalld</span></span></code></pre></div><p>如果运行命令后提示 <code>Unit firewalld.service could not be found.</code> 则表示服务不存在 如果找到了服务的话会有这样的提示：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">●</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> firewalld.service</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> firewalld</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> dynamic</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> firewall</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> daemon</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">   Loaded:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> loaded</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (/usr/lib/systemd/system/firewalld.service; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">vendor</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> preset:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">   Active:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> inactive</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (dead)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">     Docs:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> man:firewalld</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><p>第三行会有一个 Active 字段，如果结尾是 dead 则表示不在运行，否则会有绿色的 <code>Active: active (running)</code> 字样</p><p>如果正在运行的话可以使用以下命令允许 80 端口流量： 以下命令的含义是： <strong>使用 firwall-cmd 在 public 域永久（permanent）添加允许 80 端口的 TCP 流量</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --add-port=80/tcp</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --permanent</span></span></code></pre></div><h2 id="准备前端" tabindex="-1">准备前端 <a class="header-anchor" href="#准备前端" aria-label="Permalink to &quot;准备前端&quot;">​</a></h2><h3 id="克隆并编译" tabindex="-1">克隆并编译 <a class="header-anchor" href="#克隆并编译" aria-label="Permalink to &quot;克隆并编译&quot;">​</a></h3><h4 id="克隆" tabindex="-1">克隆 <a class="header-anchor" href="#克隆" aria-label="Permalink to &quot;克隆&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">仓库地</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">址</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">项目文件</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">夹</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><h4 id="编译" tabindex="-1">编译 <a class="header-anchor" href="#编译" aria-label="Permalink to &quot;编译&quot;">​</a></h4><p>对于 vitesse 而言，直接运行 <code>pnpm build</code> 就好了，执行依赖更新和 <code>build</code> 命令</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> build</span></span></code></pre></div><p>编译后文件会被放到 <code>dist</code> 文件夹下，这个时候为了方便我们版本切换，可以把 <code>dist</code> 文件夹里的文件单独放到另一个文件夹里面，这样下次更新前端的时候就不会由于运行 <code>pnpm build</code> 指令导致 <code>dist</code> 文件夹被清空，因而导致页面无法访问</p>`,58),v=i("code",null,"dist",-1),b=i("code",null,"/usr/local/frontend/<项目名称>/app",-1),_=i("code",null,"frontend",-1),m=i("code",null,"mkdir",-1),x=i("code",null,"sudo",-1),f=i("code",null,"root",-1),P=l('<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /usr/local/frontend/</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">项目名</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">称</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div>',1),S=i("code",null,"wheel",-1),T=i("code",null,"wheel",-1),N=i("code",null,"sudo",-1),w=i("code",null,"chown",-1),I=i("strong",null,"ch",-1),R=i("strong",null,"own",-1),q=l('<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> chown</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -R</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> root:whell</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /usr/local/frontend</span></span></code></pre></div>',1),H=i("code",null,"mv",-1),$=l(`<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mv</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> dist</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">文件夹地</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">址</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><h2 id="配置网页服务器" tabindex="-1">配置网页服务器 <a class="header-anchor" href="#配置网页服务器" aria-label="Permalink to &quot;配置网页服务器&quot;">​</a></h2><p>此处有两种方案可以选择，一种是直接通过 Nginx 读取静态文件，还有一种是基于一个 serve 命令的服务来实现静态文件的服务器，请求该网站的时候，流量会通过 Nginx 重定向到 serve 提供的地址，从而把数据通过 Nginx 从 serve 反代理到服务器外部，实现对内部数据的访问</p><h3 id="静态文件" tabindex="-1">静态文件 <a class="header-anchor" href="#静态文件" aria-label="Permalink to &quot;静态文件&quot;">​</a></h3><p>静态文件的配置稍微会麻烦一些，可能这个过程中会遇到权限问题，403 配置问题，<code>vue-router</code> history 模式配置不正确导致的 404 问题</p><p>新建一个 Nginx 配置文件（配置的时候可以把里面的中文注释删一下，避免编码问题）</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> vim</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /etc/nginx/conf.d/</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">域</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">名</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">.conf</span></span></code></pre></div><p>配置文件内容：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		listen </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;端口&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;域名（不带 http 前缀）&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				root </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/front; // 前端文件路径，绝对路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				index </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">index.html; //</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> hash </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">模式只配置这行支持访问 html 文件就可以了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">				try_files $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">uri</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">uri</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/ /index.html; // </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">history</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> 模式下需要加一行这个</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>如果需要部署到子目录，可以按照下面的来：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		listen </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;端口&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;域名（不带 http 前缀）&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> /demo </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{ // 子级目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				alias </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/front/demo;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				index </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">index.html;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				try_files </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">uri</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">uri</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/ /demo/index.html;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>如果需要配置为 443（HTTPS）的服务器，可以按照下面的来：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		listen </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;端口&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;域名&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 301</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> https://$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">host</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">request_uri</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 这里是指自动 301 重定向到 https 协议</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">443</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ssl http2;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        # listen [::]:443 ssl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;域名&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        ssl_certificate </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;证书位置&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        ssl_certificate_key </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;证书私钥位置&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        ssl_prefer_server_ciphers </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        ssl_protocols </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">TLSv1 TLSv1.1 TLSv1.2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        ssl_ciphers </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        keepalive_timeout </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">70</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        ssl_session_cache </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">shared:SSL:10m;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        ssl_session_timeout </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">10m</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">Strict-Transport-Security max-age=63072000;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        # add_header X-Frame-Options DENY;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">X-Content-Type-Options nosniff;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				root </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/front; // 前端文件路径，绝对路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				index </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">index.html; //</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> hash </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">模式只配置这行支持访问 html 文件就可以了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">				try_files $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">uri</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">uri</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/ /index.html; // </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">history</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> 模式下需要加一行这个</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> /demo </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{ // 子级目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				alias </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/front/demo;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				index </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">index.html;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				try_files </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">uri</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">uri</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/ /demo/index.html;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>编辑之后保存退出。</p><p>测试 Nginx 配置文件是否正确：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -t</span></span></code></pre></div><p>如果有错误的话会提示具体的文件和行号</p><p>使用 <code>nginx</code> 命令加上参数 <code>s</code> 重新载入 Nginx 配置文件并应用</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> reload</span></span></code></pre></div><h3 id="反代理" tabindex="-1">反代理 <a class="header-anchor" href="#反代理" aria-label="Permalink to &quot;反代理&quot;">​</a></h3><p>安装 serve</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> serve</span></span></code></pre></div><p>反代理图示：</p><p><code>客户端 &lt;------&gt; Nginx &lt;------&gt; serve</code></p><p>Nginx 从接收到客户端的请求（比如请求 a.com）了解到需要去找 serve 开的端口和地址要数据，于是把流量转发过去，serve 接收到之后，了解路由的参数，并且把静态文件提取出来返回给 Nginx，Nginx 拿到返回值之后直接返回给客户端，这个流程就叫做「反代理」</p><p>反代理需要额外配置一个服务，新建一个 service 文件</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /usr/lib/systemd/system/</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">项目名</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">称</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">.service</span></span></code></pre></div><p>写入服务信息</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">[Unit]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">Description</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">&lt;项目名称&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">After</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">network.target</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">[Service]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">ExecStart</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">/usr/bin/serve -s &lt;编译产物路径&gt; -l &lt;监听端口号&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">ExecStop</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">/bin/kill -s SIGINT -$MAINPID &amp; /bin/kill -s SIGINT -$MAINPID</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">ExecReload</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">/bin/kill -s SIGINT -$MAINPID &amp; /bin/kill -s SIGINT -$MAINPID &amp;&amp; /usr/bin/serve -s &lt;编译产物路径&gt; -l &lt;项目端口号&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">Restart</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">always</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">WorkingDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">&lt;编译产物路径&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">[Install]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">WantedBy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">multi-user.target</span></span></code></pre></div><p>重载 systemctl 的服务配置</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> daemon-reload</span></span></code></pre></div><p>开启 serve 服务开机自启</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> enable</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">项目名</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">称</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p>开始 serve 服务</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> start</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">项目名</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">称</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p>新建一个 Nginx 配置文件（配置的时候可以把里面的中文注释删一下，避免编码问题）</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> vim</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /etc/nginx/conf.d/</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">域</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">名</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">.conf</span></span></code></pre></div><p>配置文件内容： 此处 <strong>外部可访问端口</strong> 和 <strong>项目端口号</strong> 不可以是一致的</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		listen </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;外部可访问端口&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;域名（不带 http 前缀）&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">Host $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">http_host</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 添加一个头部 Host，值为客户端访问的域名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">X-Real-IP $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">remote_addr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 添加一个头部 X-Real-IP，值为客户端来源 IP</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">X-Real-PORT $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">remote_port</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 添加一个头部 X-Real-Port，值为客户端来源端口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">X-Forwarded-For $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">proxy_add_x_forwarded_for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 添加一个头部 X-Forwarded-For，简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项。它不是RFC中定义的标准请求头信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">http://127.0.0.1:&lt;项目端口号&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>如果需要部署到子目录，可以按照下面的来：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		listen </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;外部可访问端口&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;域名（不带 http 前缀）&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> /demo </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{ // 子级目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">Host $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">http_host</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 添加一个头部 Host，值为客户端访问的域名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">X-Real-IP $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">remote_addr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 添加一个头部 X-Real-IP，值为客户端来源 IP</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">X-Real-PORT $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">remote_port</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 添加一个头部 X-Real-Port，值为客户端来源端口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">X-Forwarded-For $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">proxy_add_x_forwarded_for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 添加一个头部 X-Forwarded-For，简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项。它不是RFC中定义的标准请求头信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">http://127.0.0.1:&lt;项目端口号&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>如果需要配置为 443（HTTPS）的服务器，可以按照下面的来：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		listen </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;外部可访问端口&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;域名&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 301</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> https://$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">host</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">request_uri</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 这里是指自动 301 重定向到 https 协议</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">443</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ssl http2;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        # listen [::]:443 ssl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;域名&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        ssl_certificate </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;证书位置&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        ssl_certificate_key </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;证书私钥位置&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        ssl_prefer_server_ciphers </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        ssl_protocols </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">TLSv1 TLSv1.1 TLSv1.2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        ssl_ciphers </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        keepalive_timeout </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">70</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        ssl_session_cache </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">shared:SSL:10m;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        ssl_session_timeout </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">10m</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">Strict-Transport-Security max-age=63072000;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        # add_header X-Frame-Options DENY;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">X-Content-Type-Options nosniff;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">Host $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">http_host</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 添加一个头部 Host，值为客户端访问的域名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">X-Real-IP $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">remote_addr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 添加一个头部 X-Real-IP，值为客户端来源 IP</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">X-Real-PORT $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">remote_port</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 添加一个头部 X-Real-Port，值为客户端来源端口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">X-Forwarded-For $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">proxy_add_x_forwarded_for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 添加一个头部 X-Forwarded-For，简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项。它不是RFC中定义的标准请求头信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">http://127.0.0.1:&lt;端口号&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> /demo </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{ // 子级目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">Host $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">http_host</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 添加一个头部 Host，值为客户端访问的域名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">X-Real-IP $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">remote_addr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 添加一个头部 X-Real-IP，值为客户端来源 IP</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">X-Real-PORT $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">remote_port</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 添加一个头部 X-Real-Port，值为客户端来源端口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">X-Forwarded-For $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">proxy_add_x_forwarded_for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 添加一个头部 X-Forwarded-For，简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项。它不是RFC中定义的标准请求头信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">				proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">http://127.0.0.1:&lt;项目端口号&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>测试 Nginx 配置文件是否正确：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -t</span></span></code></pre></div><p>如果有错误的话会提示具体的文件和行号</p><p>重新载入 Nginx 配置文件并应用</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> reload</span></span></code></pre></div><p>使用 <code>setsebool</code> 命令配置 SELinux 规则以允许 Nginx 访问内网：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> setsebool</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -P</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> httpd_can_network_connect</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> on</span></span></code></pre></div><h2 id="错误排查" tabindex="-1">错误排查 <a class="header-anchor" href="#错误排查" aria-label="Permalink to &quot;错误排查&quot;">​</a></h2><h3 id="反代理-502" tabindex="-1">反代理 502 <a class="header-anchor" href="#反代理-502" aria-label="Permalink to &quot;反代理 502&quot;">​</a></h3><p>502 表示反代理访问的端口访问不到了。 serve 服务启用了吗？可以检查以下服务运行状态：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> status</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">项目名</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">称</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p>如果出现问题，可以检查以下是否是端口占用，重复执行命令导致的。</p><h3 id="_403" tabindex="-1">403 <a class="header-anchor" href="#_403" aria-label="Permalink to &quot;403&quot;">​</a></h3><p>403 有很多可能，无论是静态文件配置还是反代理配置都有可能出现这个问题。一是缺少主页文件，二是权限问题，三是 <strong>SELinux</strong> 状态 如果是使用的静态文件配置，可以检查一下文件的权限，是不是 root，还可以看一下文件具体的权限值：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -l</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">目</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">录</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> awk</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;{k=0;for(i=0;i&lt;=8;i++)k+=((substr($1,i+2,1)~/[rwx]/) \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">             *2^(8-i));if(k)printf(&quot;%0o &quot;,k);print}&#39;</span></span></code></pre></div>`,58),L=l(`<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">总用量</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">664</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -rw-rw-r--</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> neko</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> neko</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 16</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 10月</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  9</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 17:34</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> hello</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">775</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> drwxrwxr-x</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> neko</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> neko</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  6</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 10月</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 11</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 10:37</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tests</span></span></code></pre></div><p>一般 600 的话访问不到，不是 root 的话也可能没办法访问到，需要根据具体情况重新设定一下权限才行。</p>`,2),X=l(`<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> chmod</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 755</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">文</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">件</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p>如果设定到 777 才能访问的话，和 CentOS 内置的 SELinux 保护安全策略有关，需要执行以下： 静态文件的话，授予 Nginx 针对特定目录的访问权限：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> chcon</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -Rt</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> httpd_sys_content_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">项目绝对路</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">径</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p>反代理的话，授予 Nginx 访问网络的权限：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setsebool</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -P</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> httpd_can_network_connect</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> on</span></span></code></pre></div><h3 id="_404" tabindex="-1">404 <a class="header-anchor" href="#_404" aria-label="Permalink to &quot;404&quot;">​</a></h3><p>如果是反代理配置的话，404 一般是编译产物目录下面文件找不到了，可以看一下 URL 是否正确，编译后的文件本地也可以测试以下是不是也可以访问到。</p><p>如果是 Nginx 静态文件配置的话，404 可能是 history 模式兼容性配置导致的，<code>vue-router</code> 有 hash（哈希）和 history（历史）模式，对于 404 而言需要多加一行</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		try_files </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">uri</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">uri</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/ /index.html; // </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">history</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> 模式下需要加一行这个</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div>`,9);function V(G,O,j,U,M,z){const e=h("NolebasePageProperties"),n=h("VPNolebaseInlineLinkPreview"),p=h("NolebaseGitContributors"),k=h("NolebaseGitChangelog");return o(),r("div",null,[c,a(e),y,B,i("p",null,[s("使用 "),C,s(" 或者 "),F,s("（两者都一样的效果，"),a(n,{href:"./yum dnf 包管理器.html"},{default:t(()=>[s("yum dnf 包管理器")]),_:1}),s("）进行安装")]),i("ol",null,[A,D,i("li",null,[s("此处需要安装 Nginx，Vim（编辑器，不喜欢的话可以换成 GUN Nano），Git（"),a(n,{href:"./../📟 终端/软件/Git 版本控制/Git 命令速记.html"},{default:t(()=>[s("Git 命令速记")]),_:1}),s("），Node.js，pnpm（包管理器）")]),E]),u,i("p",null,[s("移动编译产物 "),v,s(" 文件夹到别的地方 如果是需要限制权限和访问的，可以放到 "),b,s("，"),_,s(" 是前端的意思 这个目录使用 "),m,s(" （参考 "),a(n,{href:"./../📟 终端/Linux 命令/文件管理/mkdir 创建目录.html"},{default:t(()=>[s("mkdir 创建目录")]),_:1}),s("）创建的时候带上 "),x,s(" 就可以限制为仅可 "),f,s(" 或 root 权限访问：")]),P,i("p",null,[s("还可以授予 "),S,s(" 用户组权限（可选），"),T,s(" 用户组就等同于「超级管理组」，在这个组的人都有 "),N,s(" 权限，"),w,s(" 命令（参考 "),a(n,{href:"./../📟 终端/Linux 命令/权限管理/chown 变更所属权.html"},{default:t(()=>[s("chown 变更所属权")]),_:1}),s("）表示「"),I,s("ange "),R,s("ership（变更归属权）」， root:wheel 表示：「root 用户和 wheel 用户组」，-R 表示使用递归策略，遍历并应用规则到下面的目录和文件")]),q,i("p",null,[s("如果没有特别的需求，可以放到原地，比如新建一个 app 文件夹用来存编译产物也是完全没问题的；使用 "),H,s(" 命令（参考 "),a(n,{href:"./../📟 终端/Linux 命令/文件管理/mv 剪贴、移动.html"},{default:t(()=>[s("mv 剪贴、移动")]),_:1}),s("）把编译好的内容放到新的地方：")]),$,i("p",null,[s("使用上面的命令可以获得下面的输出，这样可以在最前面看到每个文件的具体权限值（"),a(n,{href:"./../📟 终端/Linux 权限.html"},{default:t(()=>[s("Linux 权限")]),_:1}),s("）：")]),L,i("p",null,[s("变更权限值，755 是一个例子，具体根据情况而定（参见 "),a(n,{href:"https://www.jianshu.com/p/aa0ae40204ae",target:"_blank",rel:"noreferrer"},{default:t(()=>[s("https://www.jianshu.com/p/aa0ae40204ae")]),_:1}),s("） 一般常用的是 655 或者 755")]),X,a(p),a(k)])}const Y=d(g,[["render",V]]);export{K as __pageData,Y as default};
