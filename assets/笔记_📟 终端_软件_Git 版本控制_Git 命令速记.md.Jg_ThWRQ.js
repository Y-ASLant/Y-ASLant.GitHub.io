import{_ as l,c as o,I as t,j as a,a as h,au as r,D as e,o as n}from"./chunks/framework.RMxno62p.js";const q=JSON.parse('{"title":"Git 命令速记","description":"","frontmatter":{"tags":["命令行/git"]},"headers":[],"relativePath":"笔记/📟 终端/软件/Git 版本控制/Git 命令速记.md","filePath":"笔记/📟 终端/软件/Git 版本控制/Git 命令速记.md"}'),c={name:"笔记/📟 终端/软件/Git 版本控制/Git 命令速记.md"},g=a("h1",{id:"git-命令速记",tabindex:"-1"},[h("Git 命令速记 "),a("a",{class:"header-anchor",href:"#git-命令速记","aria-label":'Permalink to "Git 命令速记"'},"​")],-1),p=r('<p>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>建议通过大纲索引快速找到需要使用的命令</p><h2 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h2><h4 id="初始化-init" tabindex="-1">初始化 (init) <a class="header-anchor" href="#初始化-init" aria-label="Permalink to &quot;初始化 (init)&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> init</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">目录（可选</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">）</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p>在指定目录下创建空的Git仓库。运行时没有参数，以初始化当前目录为git仓库。</p><h4 id="克隆-clone" tabindex="-1">克隆 (clone) <a class="header-anchor" href="#克隆-clone" aria-label="Permalink to &quot;克隆 (clone)&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">代码仓库地</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">址</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p>克隆位于 <code>&lt;代码仓库地址&gt;</code> 的仓库到本地机器上。原始（origin）可以位于本地文件系统上，也可以通过 HTTP 或 SSH 位于远程机器上。</p><h4 id="修改配置-config" tabindex="-1">修改配置 (config) <a class="header-anchor" href="#修改配置-config" aria-label="Permalink to &quot;修改配置 (config)&quot;">​</a></h4><h5 id="设置姓名" tabindex="-1">设置姓名 <a class="header-anchor" href="#设置姓名" aria-label="Permalink to &quot;设置姓名&quot;">​</a></h5><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --local</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> user.name</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">用户</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">名</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p>定义作者姓名，将会应用到当前版本库中的所有提交。对于只有一个账户的开发者而言，可以使用 --global 标志来给所有 Git 代码库设置当前用户的配置选项。</p><h5 id="设置邮箱地址" tabindex="-1">设置邮箱地址 <a class="header-anchor" href="#设置邮箱地址" aria-label="Permalink to &quot;设置邮箱地址&quot;">​</a></h5><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> `</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">电子邮件</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`</span></span></code></pre></div><p>定义作者电子邮件，将会应用到当前版本库中的所有提交。对于只有一个账户的开发者而言，可以使用 --global 标志来给所有 Git 代码库设置当前用户的配置选项。</p><h4 id="暂存更改-add" tabindex="-1">暂存更改 (add) <a class="header-anchor" href="#暂存更改-add" aria-label="Permalink to &quot;暂存更改 (add)&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">目录/文</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">件</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p>暂存 <code>&lt;目录&gt;</code> 中的所有修改，以便于提交。用 <code>&lt;文件&gt;</code> 替换 <code>&lt;目录&gt;</code> 来暂存一个特定的文件。</p><h4 id="提交更改-commit" tabindex="-1">提交更改 (commit) <a class="header-anchor" href="#提交更改-commit" aria-label="Permalink to &quot;提交更改 (commit)&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">提交信</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">息</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p>提交暂存的文件。使用 <code>&lt;提交信息&gt;</code> 作为提交消息，不通过文本编辑器来编辑。</p><h4 id="文件修改状态-status" tabindex="-1">文件修改状态 (status) <a class="header-anchor" href="#文件修改状态-status" aria-label="Permalink to &quot;文件修改状态 (status)&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> status</span></span></code></pre></div><p>列出哪些文件是暂存的、未暂存的和未追踪的。</p><h4 id="提交历史-log" tabindex="-1">提交历史 (log) <a class="header-anchor" href="#提交历史-log" aria-label="Permalink to &quot;提交历史 (log)&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> log</span></span></code></pre></div><p>使用默认格式显示整个提交历史。关于自定义参数，请看 <strong>附加选项</strong> 。</p><h4 id="查看未暂存的更改-diff" tabindex="-1">查看未暂存的更改 (diff) <a class="header-anchor" href="#查看未暂存的更改-diff" aria-label="Permalink to &quot;查看未暂存的更改 (diff)&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> diff</span></span></code></pre></div><p>显示索引和工作目录之间的未暂存变更。</p><h2 id="撤销变更" tabindex="-1">撤销变更 <a class="header-anchor" href="#撤销变更" aria-label="Permalink to &quot;撤销变更&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git revert &lt;提交哈希&gt;</code></td><td>创建新的提交，撤销 <code>&lt;提交哈希&gt;</code> 中的所有修改，然后将其应用到当前分支。</td></tr><tr><td><code>git reset &lt;文件&gt;</code></td><td>从暂存区域移除 <code>&lt;文件&gt;</code>，但保留工作目录不变。这可以在不覆盖任何修改的情况下解除文件的缓存。</td></tr><tr><td><code>git clean -n</code></td><td>显示哪些文件会被从工作目录中删除。使用 -f 标志代替 -n 标志来执行清理。</td></tr></tbody></table><h2 id="覆盖提交历史" tabindex="-1">覆盖提交历史 <a class="header-anchor" href="#覆盖提交历史" aria-label="Permalink to &quot;覆盖提交历史&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git commit ---amend</code></td><td>将最后一次提交的内容和最后一次提交的内容结合起来替换。在没有任何分期的情况下使用，可以编辑最后一次提交的信息</td></tr><tr><td><code>git rebase &lt;基准&gt;</code></td><td>将当前分支重新归入 <code>&lt;基准&gt;</code>。<code>&lt;基准&gt;</code> 可以是一个提交编号、分支名称、一个标签，或者是对 HEAD 的相对引用。</td></tr><tr><td><code>git reflog</code></td><td>显示本地版本库HEAD的修改日志。添加 --relative-date 标志来显示日期信息，或者 --all 来显示所有参考。</td></tr></tbody></table><h2 id="分支操作" tabindex="-1">分支操作 <a class="header-anchor" href="#分支操作" aria-label="Permalink to &quot;分支操作&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git branch</code></td><td>列出你的代码仓库中的所有分支。添加 <code>&lt;分支名&gt;</code> 参数，创建一个名称为 <code>&lt;分支名&gt;</code> 的新分支。</td></tr><tr><td><code>git checkou -b &lt;分支名&gt;</code></td><td>创建并签出一个名为 <code>&lt;分支名&gt;</code> 的新分支。去掉 -b 标志，签出一个现有的分支。</td></tr><tr><td><code>git merge &lt;分支名&gt;</code></td><td>将 <code>&lt;分支名&gt;</code> 合并到当前分支。</td></tr></tbody></table><h2 id="远程代码库" tabindex="-1">远程代码库 <a class="header-anchor" href="#远程代码库" aria-label="Permalink to &quot;远程代码库&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git remote add &lt;标记名称&gt; &lt;远程地址&gt;</code></td><td>创建一个新的连接到一个远程版本库。添加远程后，你可以在其他命令中使用 <code>&lt;标记名称&gt;</code> 作为 <code>&lt;远程地址&gt;</code> 的快捷方式。</td></tr><tr><td><code>git fetch &lt;远程地址/标记名称&gt; &lt;分支名称&gt;</code></td><td>从版本库中获取一个特定的 <code>&lt;分支名称&gt;</code> 。不使用 <code>&lt;分支名称&gt;</code> 来获取所有的远程参考。</td></tr><tr><td><code>git pull &lt;远程地址/标记名称&gt;</code></td><td>获取当前分支的指定远程副本，并立即将其合并到本地副本。</td></tr><tr><td><code>git push &lt;远程地址/标记名称&gt; &lt;分支名称&gt;</code></td><td>将该分支与必要的提交和对象一起推送到 <code>&lt;远程地址/标记名称&gt;</code> 。如果分支不存在，则在远端 repo 中创建命名的分支。</td></tr></tbody></table><h2 id="git-配置" tabindex="-1">Git 配置 <a class="header-anchor" href="#git-配置" aria-label="Permalink to &quot;Git 配置&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git config --global user.name &lt;用户名&gt;</code></td><td>定义作者的名字，用于当前用户的所有提交。</td></tr><tr><td><code>git config --global user.email &lt;电子邮件&gt;</code></td><td>定义作者的电子邮件，用于当前用户的所有提交。</td></tr><tr><td><code>git config --global alias. &lt;别名&gt; &lt;git 命令&gt;</code></td><td>创建 Git 命令的快捷方式。例如，alias.glog &quot;log --graph --oneline&quot; 将设置 &quot;git glog &quot;等同于 &quot;git log --graph --oneline&quot;。</td></tr><tr><td><code>git config --system core.editor &lt;编辑器&gt;</code></td><td>设置机器上所有用户的命令所使用的文本编辑器。<code>&lt;编辑器&gt;</code> 参数应该是启动所需编辑器的命令（例如，vi）。</td></tr><tr><td><code>git config --global --edit</code></td><td>在文本编辑器中打开全局配置文件进行手动编辑。</td></tr></tbody></table><h2 id="git-记录" tabindex="-1">Git 记录 <a class="header-anchor" href="#git-记录" aria-label="Permalink to &quot;Git 记录&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git log -&lt;上限&gt;</code></td><td>用 <code>&lt;上限&gt;</code> 来限制提交的数量。例如，&quot;git log -5 &quot;将限制为5个提交。</td></tr><tr><td><code>git log --oneline</code></td><td>将每个提交浓缩为一行。</td></tr><tr><td><code>git log -p</code></td><td>显示每个提交的完整差异。</td></tr><tr><td><code>git log --stat</code></td><td>包括哪些文件被修改了，以及每个文件中被添加或删除的相对行数。</td></tr><tr><td><code>git log --author= &quot;&lt;文本模式&gt;&quot;</code></td><td>搜索某个特定作者的提交内容。</td></tr><tr><td><code>git log --grep=&quot;&lt;文本模式&gt;&quot;</code></td><td>搜索提交信息符合 <code>&lt;文本模式&gt;</code> 的提交。</td></tr><tr><td><code>git log &lt;开始&gt;..&lt;结束&gt;</code></td><td>显示发生在 <code>&lt;开始&gt;</code> 和 <code>&lt;结束&gt;</code> 之间的提交。参数可以是提交ID、分支名称、HEAD或任何其他类型的修订参考。</td></tr><tr><td><code>git log -- &lt;文件&gt;</code></td><td>只显示有指定文件的提交。</td></tr><tr><td><code>git log --graph --decorate</code></td><td>--graph 标志会在提交信息的左侧绘制一个基于文本的提交图表。msgs。--decorate（装饰）在提交信息的左侧添加分支的名称或标签。</td></tr></tbody></table><h2 id="git-diff-对比" tabindex="-1">Git Diff 对比 <a class="header-anchor" href="#git-diff-对比" aria-label="Permalink to &quot;Git Diff 对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git diff HEAD</code></td><td>显示工作目录和最后一次提交之间的差异。</td></tr><tr><td><code>git diff --cached</code></td><td>显示暂存的修改与最后一次提交的差异。</td></tr></tbody></table><h2 id="git-reset-重设" tabindex="-1">Git Reset 重设 <a class="header-anchor" href="#git-reset-重设" aria-label="Permalink to &quot;Git Reset 重设&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git reset</code></td><td>重置暂存区域，使之与最近的提交相匹配，但保留工作目录不变。</td></tr><tr><td><code>git reset --hard</code></td><td>重置暂存区域和工作目录以匹配最近的提交，并覆盖工作目录中的所有修改。</td></tr><tr><td><code>git reset &lt;提交哈希&gt;</code></td><td>将当前分支提示向后移动到 <code>&lt;提交哈希&gt;</code>，重置暂存区域以匹配，但不影响工作目录。</td></tr><tr><td><code>git reset --hard &lt;提交哈希&gt;</code></td><td>与前述相同，但将暂存区和工作目录都重置为匹配。删除未提交的修改，以及 <code>&lt;提交哈希&gt;</code> 之后的所有提交。</td></tr></tbody></table><h2 id="git-rebase-变基" tabindex="-1">Git Rebase 变基 <a class="header-anchor" href="#git-rebase-变基" aria-label="Permalink to &quot;Git Rebase 变基&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git rebase -i &lt;基准&gt;</code></td><td>使用交互模式将当前分支重新归入 <code>&lt;基准&gt;</code>。启动编辑器，输入命令，说明如何将每个提交转移到新基地。</td></tr></tbody></table><h2 id="git-pull-拉取" tabindex="-1">Git Pull 拉取 <a class="header-anchor" href="#git-pull-拉取" aria-label="Permalink to &quot;Git Pull 拉取&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git pull --rebase &lt;远程连接/标记名称&gt;</code></td><td>获取远程的当前分支的副本，并将其重新归入本地副本。使用 git rebase 相似的模式而不是 merge 模式来整合各分支。</td></tr></tbody></table><h2 id="git-push-推送" tabindex="-1">Git Push 推送 <a class="header-anchor" href="#git-push-推送" aria-label="Permalink to &quot;Git Push 推送&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git push &lt;远程连接/标记名称&gt; --force</code></td><td>强制执行git推送，即使它的结果是非快进式合并。不要使用 --force 标志，除非你绝对确定你知道自己在做什么。</td></tr><tr><td><code>git push &lt;remote&gt; --all</code></td><td>推送你所有的本地分支到指定的远程。</td></tr><tr><td><code>git push &lt;远程连接/标记名称&gt; --all</code></td><td>当你推送一个分支或使用 --all 标志。--tags 标志会将你所有的本地标签推送到远程 repo 上。</td></tr></tbody></table>',53);function k(b,u,y,m,f,F){const i=e("NolebasePageProperties"),d=e("NolebaseGitContributors"),s=e("NolebaseGitChangelog");return n(),o("div",null,[g,t(i),p,t(d),t(s)])}const B=l(c,[["render",k]]);export{q as __pageData,B as default};
