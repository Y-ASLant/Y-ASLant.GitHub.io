import{_ as r,c as d,I as a,j as e,a as s,w as t,au as l,D as i,o as k}from"./chunks/framework.RMxno62p.js";const E=JSON.parse('{"title":"中心化 Protobuf 仓库如何为多个语言进行分布式地构建，管理和发布","description":"","frontmatter":{"tags":["开发/API/Protobuf","网站/GitHub","开发/CICD/GitHub-Actions","开发/API/gRPC","开发/语言/Golang","开发/语言/TypeScript","开发/Monorepo","开发/代码/代码生成","命令行/protoc","命令行/buf"],"status":"尚未完成"},"headers":[],"relativePath":"笔记/🛠️ 开发/🏹 gRPC/中心化 Protobuf 仓库如何为多个语言进行分布式地构建，管理和发布.md","filePath":"笔记/🛠️ 开发/🏹 gRPC/中心化 Protobuf 仓库如何为多个语言进行分布式地构建，管理和发布.md"}'),c={name:"笔记/🛠️ 开发/🏹 gRPC/中心化 Protobuf 仓库如何为多个语言进行分布式地构建，管理和发布.md"},g=e("h1",{id:"中心化-protobuf-仓库如何为多个语言进行分布式地构建-管理和发布",tabindex:"-1"},[s("中心化 Protobuf 仓库如何为多个语言进行分布式地构建，管理和发布 "),e("a",{class:"header-anchor",href:"#中心化-protobuf-仓库如何为多个语言进行分布式地构建-管理和发布","aria-label":'Permalink to "中心化 Protobuf 仓库如何为多个语言进行分布式地构建，管理和发布"'},"​")],-1),u=l(`<div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>⚠️ 该文档尚未完成，仍在编写中...</p></div><h2 id="说明" tabindex="-1">说明 <a class="header-anchor" href="#说明" aria-label="Permalink to &quot;说明&quot;">​</a></h2><p>最近使用到了 gRPC 和 Protobuf，为了方便从 Protobuf 构建多个语言的代码生成（codegen）文件并且能进行妥善的管理，我在寻得多方大佬的意见和建议、阅读了不少公开的文献之后采用了：中心化仓库放置 Protobuf 定义文件和分布式构建、管理和发布代码生成（codegen）文件的方案。</p><h2 id="为何是中心化-为何是分布式" tabindex="-1">为何是中心化，为何是分布式？ <a class="header-anchor" href="#为何是中心化-为何是分布式" aria-label="Permalink to &quot;为何是中心化，为何是分布式？&quot;">​</a></h2><p>之所以采用了中心化的方案，是因为考虑到 Protobuf 是最上游的依赖，且 Protobuf 中定义的内容一般而言都是其他调用方会需要使用到的（如果我们将 Protobuf 按照微服务拆开的话，微服务间同步和共享 Protobuf 的定义文件和进行代码生成（codegen）又会变得麻烦了）。</p><p>我不采用 Monorepo 来放置各语言代码生成（codegen）的文件，或者直接将这些代码生成（codegen）产物放到 Protobuf 中心化仓库的原因，主要是因为我觉得各个语言和各个生态所使用的构建策略和相关的工具链是各不相同的，而往往使用称手的工具才能事半功倍。 比如 TypeScript 项目可能会希望将 Protobuf 构建并生成的类型定义文件发布为一个单独的 npm 包（如果是期望私有发布的，也可以是发布到自建的 registry 中），Java 也是如此，而 Golang 又会希望直接使用 Git 和 Git Tag 功能进行管理和版本控制，这些不同的需求如果我们都放在一个超大的仓库里或者是 Protobuf 的仓库中时，未免会导致 CI 和各仓库权限分配的困难、配置文件、CI/CD 文件的混乱、构建工具和构建时环境要求的不同等各种问题。</p><h2 id="如何组织文件呢" tabindex="-1">如何组织文件呢？ <a class="header-anchor" href="#如何组织文件呢" aria-label="Permalink to &quot;如何组织文件呢？&quot;">​</a></h2><p>我们假设我们有一个中心化仓库叫做：<code>&lt;命名空间&gt;-protobuf</code> （比如我自己的项目中会用到的 Protobuf 所存放的仓库就可以叫做 <code>nekomeowww-protobuf</code>），以及我们有如下的文件结构：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tree</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> README.md</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> helloworld</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> v1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        └──</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> helloworldpb</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">            └──</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> helloworld.proto</span></span></code></pre></div><p>以及一个需要构建的目标仓库 <code>&lt;命名空间&gt;-protobuf-&lt;语言/SDK/环境&gt;</code>（比如给 Golang 进行构建的话就是 <code>nekomeowww-protobuf-go</code>）：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tree</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> README.md</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> go.mod</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> go.sum</span></span></code></pre></div><h2 id="如何构建呢" tabindex="-1">如何构建呢？ <a class="header-anchor" href="#如何构建呢" aria-label="Permalink to &quot;如何构建呢？&quot;">​</a></h2>`,12),_=e("code",null,"protoc",-1),b=l(`<p>在中心化仓库中的根目录创建一个 buf 工具的配置文件 <code>buf.yaml</code>，并在其中写入如下内容：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light one-dark-pro has-diff vp-code" tabindex="0"><code><span class="line diff add"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">v1</span></span></code></pre></div><p>为了能够为我们的目标语言 Go 进行代码生成（codegen），我们还需要在其根目录中创建一个 buf 工具用来完成代码生成的配置文件 <code>buf.gen.yaml</code>，并在其中写下如下内容：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light one-dark-pro has-diff vp-code" tabindex="0"><code><span class="line diff add"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">v1</span></span>
<span class="line"></span>
<span class="line diff add"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">go</span></span>
<span class="line diff add"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;gen/go/proto&quot;</span></span>
<span class="line diff add"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  opt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">paths=source_relative</span></span>
<span class="line"></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">go-grpc</span></span>
<span class="line diff add"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;gen/go/proto&quot;</span></span>
<span class="line diff add"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  opt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">paths=source_relative</span></span></code></pre></div><p><strong>TO BE CONTINUE...</strong></p>`,5);function f(C,y,F,P,m,A){const p=i("NolebasePageProperties"),n=i("VPNolebaseInlineLinkPreview"),o=i("NolebaseGitContributors"),h=i("NolebaseGitChangelog");return k(),d("div",null,[g,a(p),u,e("p",null,[s("首先我们得引入一个 Protobuf 构建工具，"),a(n,{href:"https://buf.build/",target:"_blank",rel:"noreferrer"},{default:t(()=>[s("buf")]),_:1}),s("。buf 构建工具支持通过本地配置的 "),_,s(" 插件来进行多种语言，多种配置，多种输出目录的构建配置，buf 也提供了 lint，破坏性更新检查等等繁多的功能，不过本文中我们暂时不展开介绍和讨论，详细的可以到 "),a(n,{href:"https://docs.buf.build/introduction",target:"_blank",rel:"noreferrer"},{default:t(()=>[s("buf 文档")]),_:1}),s(" 中详细学习和阅读。")]),b,a(o),a(h)])}const v=r(c,[["render",f]]);export{E as __pageData,v as default};
