import{_ as k,c as d,I as s,j as i,w as t,a as n,au as o,D as a,o as r}from"./chunks/framework.RMxno62p.js";const x=JSON.parse('{"title":"激活 Debian 上安装的 Nginx 的 Stream 模块来支持转发 TCP 和 UDP 请求","description":"","frontmatter":{"tags":["计算机/网络/网关/Nginx","计算机/网络/网关","命令行/apt","操作系统/Debian","操作系统/Debian/Debian-11","操作系统/Debian/Debian-12","计算机/网络/协议/TCP","计算机/网络/协议/UDP","命令行/终端","运维/网络","基础设施/Homelab","开发/故障排查"]},"headers":[],"relativePath":"笔记/🎛️ 操作系统/🍥 Debian/激活 Debian 上安装的 Nginx 的 Stream 模块来支持转发 TCP 和 UDP 请求.md","filePath":"笔记/🎛️ 操作系统/🍥 Debian/激活 Debian 上安装的 Nginx 的 Stream 模块来支持转发 TCP 和 UDP 请求.md"}'),g={name:"笔记/🎛️ 操作系统/🍥 Debian/激活 Debian 上安装的 Nginx 的 Stream 模块来支持转发 TCP 和 UDP 请求.md"},c=i("h1",{id:"激活-debian-上安装的-nginx-的-stream-模块来支持转发-tcp-和-udp-请求",tabindex:"-1"},[n("激活 Debian 上安装的 Nginx 的 Stream 模块来支持转发 TCP 和 UDP 请求 "),i("a",{class:"header-anchor",href:"#激活-debian-上安装的-nginx-的-stream-模块来支持转发-tcp-和-udp-请求","aria-label":'Permalink to "激活 Debian 上安装的 Nginx 的 Stream 模块来支持转发 TCP 和 UDP 请求"'},"​")],-1),C=o(`<h2 id="tl-dr" tabindex="-1">TL;DR <a class="header-anchor" href="#tl-dr" aria-label="Permalink to &quot;TL;DR&quot;">​</a></h2><p>安装 <code>libnginx-mod-stream</code> 模块来支持 Nginx 的 <code>stream</code> 功能：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> libnginx-mod-stream</span></span></code></pre></div><p>把 Nginx 根配置文件关联的 <code>/etc/nginx/modules-enabled/*.conf</code> 的 <code>50-mod-stream.conf.removed</code> 恢复为 <code>50-mod-stream.conf</code></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mv</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /etc/nginx/modules-enabled/50-mod-stream.conf.removed</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /etc/nginx/modules-enabled/50-mod-stream.conf</span></span></code></pre></div><p>然后继续使用 <code>stream</code> 块就好了。</p><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>今天在刚升级过的 Debian 网关设备之后访问 TCP/UDP 服务的时候遭遇了发起连接的客户端报错</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>Couldn&#39;t connect to server</span></span></code></pre></div><p>的问题，检查了一下之后发现是因为之前编写和补充进去的 TCP/UDP 代理用到的 <code>stream</code> 块失踪了，我怀疑可能和升级之后的 Nginx 版本下的配置文件修改有一定的关系。</p><p>在升级之前，我是这样编写的 Nginx 根配置文件 <code>nginx.conf</code>：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	include </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/etc/nginx/tcp.d/*.conf;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>如果直接把 <code>stream</code> 修补进来，执行</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -t</span></span></code></pre></div><p>去检查 Nginx 配置文件有效性的话，就会发现下面这样的错误</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -t</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">2023/12/03</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 19:11:44</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [emerg] 2855#2855: unknown directive </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;stream&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> in /etc/nginx/nginx.conf:62</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">nginx:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> configuration</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /etc/nginx/nginx.conf</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> failed</span></span></code></pre></div><p>那 <code>stream</code> 丢失的话应该是和 Nginx 的编译模块相关？</p><p>我又检查了一下</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -V</span></span></code></pre></div><p>的输出，发现 <code>--with-stream=dynamic</code> 是存在的：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -V</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">nginx</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> version:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nginx/1.22.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">built</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> with</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> OpenSSL</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 3.0.8</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 7</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Feb</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2023</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (running </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">with</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> OpenSSL</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 3.0.11</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 19</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Sep</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2023</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">TLS</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> SNI</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> support</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> enabled</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">configure</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> arguments:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-cc-opt=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;-g -O2 -ffile-prefix-map=/build/nginx-AoTv4W/nginx-1.22.1=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC -Wdate-time -D_FORTIFY_SOURCE=2&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-ld-opt=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;-Wl,-z,relro -Wl,-z,now -fPIC&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --prefix=/usr/share/nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --conf-path=/etc/nginx/nginx.conf</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --http-log-path=/var/log/nginx/access.log</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --error-log-path=stderr</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --lock-path=/var/lock/nginx.lock</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --pid-path=/run/nginx.pid</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --modules-path=/usr/lib/nginx/modules</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --http-client-body-temp-path=/var/lib/nginx/body</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --http-fastcgi-temp-path=/var/lib/nginx/fastcgi</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --http-proxy-temp-path=/var/lib/nginx/proxy</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --http-scgi-temp-path=/var/lib/nginx/scgi</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --http-uwsgi-temp-path=/var/lib/nginx/uwsgi</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-compat</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-debug</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-pcre-jit</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-http_ssl_module</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-http_stub_status_module</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-http_realip_module</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-http_auth_request_module</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-http_v2_module</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-http_dav_module</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-http_slice_module</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-threads</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-http_addition_module</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-http_flv_module</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-http_gunzip_module</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-http_gzip_static_module</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-http_mp4_module</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-http_random_index_module</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-http_secure_link_module</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-http_sub_module</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-mail_ssl_module</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-stream_ssl_module</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-stream_ssl_preread_module</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-stream_realip_module</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-http_geoip_module=dynamic</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-http_image_filter_module=dynamic</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-http_perl_module=dynamic</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-http_xslt_module=dynamic</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-mail=dynamic</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-stream=dynamic</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --with-stream_geoip_module=dynamic</span></span></code></pre></div><p>但是我似乎太久没有搞过这部分的配置了，不太记得 <code>dynamic</code> 代表了什么，于是去搜索了一下这个问题，发现在 <code>--with-stream=dynamic</code> 的情况下，需要通过用户手动引入依赖的 <code>so</code> 库文件才能让这个模块正常工作：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">load_module </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/usr/lib/nginx/modules/ngx_stream_module.so;</span></span></code></pre></div><h2 id="解决" tabindex="-1">解决 <a class="header-anchor" href="#解决" aria-label="Permalink to &quot;解决&quot;">​</a></h2><p>我又检查了一下 Nginx 的根配置文件 <code>nginx.conf</code>，发现内部是对模块有可选配置的文件定义的：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light one-dark-pro has-highlighted vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">user </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">www-data;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">worker_processes </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">auto;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">pid </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/run/nginx.pid;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">error_log </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/var/log/nginx/error.log;</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">include </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/etc/nginx/modules-enabled/*.conf; </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">events</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	worker_connections </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">768</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	# multi_accept on;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>这个时候我去 <code>/etc/nginx/modules-enabled/</code> 目录下面找到了这个 <code>stream</code> 模块相关的定义文件：<code>/etc/nginx/modules-enabled/50-mod-stream.conf.removed</code>，但如果直接通过</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mv</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /etc/nginx/modules-enabled/50-mod-stream.conf.removed</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /etc/nginx/modules-enabled/50-mod-stream.conf</span></span></code></pre></div><p>这个文件去尝试将 <code>removed</code> 的模块激活的话，会遇到 <code>没有那个文件或目录</code> 的错误，这个时候我又去检查了这个文件具体是链接到了哪里：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -la</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /etc/nginx/modules-enabled/50-mod-stream.conf.removed</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">lrwxrwxrwx</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> root</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 50</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 2022年</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 6月14日</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /etc/nginx/modules-enabled/50-mod-stream.conf.removed</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /usr/share/nginx/modules-available/mod-stream.conf</span></span></code></pre></div><p>发现它确实是一个软链接，这个时候如果我们通过 <code>cat</code> 来观察 <code>/usr/share/nginx/modules-available/mod-stream.conf</code> 的话就可以验证没有这个配置文件的问题：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> cat</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /usr/share/nginx/modules-available/mod-stream.conf</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">cat:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /usr/share/nginx/modules-available/mod-stream.conf:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 没有那个文件或目录</span></span></code></pre></div><p>我用</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> search</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nginx</span></span></code></pre></div><p>找到了 <code>stream</code> 模块需要的包，接下来安装就好了：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> libnginx-mod-stream</span></span></code></pre></div><p>安装结束之后我们再次恢复原先 Nginx 根配置文件 <code>nginx.conf</code> 下面的 <code>stream</code> 模块相关的定义：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	include </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/etc/nginx/tcp.d/*.conf;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>再次运行</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -t</span></span></code></pre></div><p>最终就发现它能正常工作了！</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2>`,42);function y(m,u,b,F,D,_){const l=a("NolebasePageProperties"),e=a("VPNolebaseInlineLinkPreview"),h=a("NolebaseGitContributors"),p=a("NolebaseGitChangelog");return r(),d("div",null,[c,s(l),C,i("ul",null,[i("li",null,[s(e,{href:"https://stackoverflow.com/questions/50850900/nginx-unknown-directive-stream",target:"_blank",rel:"noreferrer"},{default:t(()=>[n("udp - NGINX Unknown Directive Stream - Stack Overflow")]),_:1})]),i("li",null,[s(e,{href:"https://serverfault.com/questions/858067/unknown-directive-stream-in-etc-nginx-nginx-conf86",target:"_blank",rel:"noreferrer"},{default:t(()=>[n('unknown directive "stream" in /etc/nginx/nginx.conf:86 - Server Fault')]),_:1})])]),s(h),s(p)])}const A=k(g,[["render",y]]);export{x as __pageData,A as default};
