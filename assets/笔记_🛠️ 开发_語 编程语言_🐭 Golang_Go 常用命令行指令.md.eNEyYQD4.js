import{_ as p,c as d,I as s,j as e,a as i,w as k,au as t,D as a,o as r}from"./chunks/framework.RMxno62p.js";const E=JSON.parse('{"title":"Go 常用命令行指令","description":"","frontmatter":{"tags":["开发/代码/代码片段","开发/语言/Golang","命令行/go"]},"headers":[],"relativePath":"笔记/🛠️ 开发/語 编程语言/🐭 Golang/Go 常用命令行指令.md","filePath":"笔记/🛠️ 开发/語 编程语言/🐭 Golang/Go 常用命令行指令.md"}'),c={name:"笔记/🛠️ 开发/語 编程语言/🐭 Golang/Go 常用命令行指令.md"},g=e("h1",{id:"go-常用命令行指令",tabindex:"-1"},[i("Go 常用命令行指令 "),e("a",{class:"header-anchor",href:"#go-常用命令行指令","aria-label":'Permalink to "Go 常用命令行指令"'},"​")],-1),u=t(`<p>基本上所有的代码添加 -v 参数都意味着「<strong>显示更多的日志信息</strong>」 -v 指的是英文的 verbose（啰嗦），比如你想要知道更多的<strong>构建信息，下载信息</strong></p><h2 id="获取当前-go-的环境配置-不添加任何参数时" tabindex="-1">获取当前 go 的环境配置（不添加任何参数时） <a class="header-anchor" href="#获取当前-go-的环境配置-不添加任何参数时" aria-label="Permalink to &quot;获取当前 go 的环境配置（不添加任何参数时）&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> env</span></span></code></pre></div><p>在某些网站上可能会要求你用这个命令解决：依赖下载过慢，编译故障，引用问题等等</p><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><h4 id="_1-开启-go111module" tabindex="-1">1. 开启 GO111MODULE <a class="header-anchor" href="#_1-开启-go111module" aria-label="Permalink to &quot;1. 开启 GO111MODULE&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> env</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> GO111MODULE=on</span></span></code></pre></div><p>如果开启了这个选项，你就可以把你的项目和源码放到你喜欢的地方直接开发； 如果希望关掉这个选项，只需要把 on 改成 off 即可。</p><h4 id="_2-设置代理" tabindex="-1">2. 设置代理 <a class="header-anchor" href="#_2-设置代理" aria-label="Permalink to &quot;2. 设置代理&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> env</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> GOPROXY=https://goproxy.io,direct</span></span></code></pre></div><p>通常在国内下载 gopkg 都是极其缓慢甚至有出错风险的，国内的帖子都会建议使用上面的命令去设定 go 的代理</p><h2 id="初始化项目" tabindex="-1">初始化项目 <a class="header-anchor" href="#初始化项目" aria-label="Permalink to &quot;初始化项目&quot;">​</a></h2><blockquote><p>这个命令需要把上一章节讲的 go env -w GO111MODULE=on 运行一下</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mod</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [项目名称]</span></span></code></pre></div><p>然后你在代码中引用自己的包的时候就会这样：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> main</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#98C379;">[项目名称]/[包名1]</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    [</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">重命名的包名</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#98C379;">[项目名称]/[包名2]</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><p>有时候可能遇到的依赖项校验码和依赖项不匹配的问题</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mod</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tidy</span></span></code></pre></div><p>运行一下就好了</p><h2 id="构建代码为可执行文件-二进制文件" tabindex="-1">构建代码为可执行文件（二进制文件） <a class="header-anchor" href="#构建代码为可执行文件-二进制文件" aria-label="Permalink to &quot;构建代码为可执行文件（二进制文件）&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> build</span></span></code></pre></div><h3 id="示例-1" tabindex="-1">示例 <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例&quot;">​</a></h3><ol><li>把当前目录下的源代码编译并放到当前目录下，保存为名为「a」的可执行文件</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ./a</span></span></code></pre></div><ol start="2"><li>把额外的编译日志输出到命令行</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">go build</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -v</span></span></code></pre></div><h3 id="直接运行代码-一般运行-main-函数的那个文件" tabindex="-1">直接运行代码（一般运行 main 函数的那个文件） <a class="header-anchor" href="#直接运行代码-一般运行-main-函数的那个文件" aria-label="Permalink to &quot;直接运行代码（一般运行 main 函数的那个文件）&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [代码文件名]</span></span></code></pre></div><h2 id="获取依赖-比如你在网上找到的别的库或者包" tabindex="-1">获取依赖（比如你在网上找到的别的库或者包） <a class="header-anchor" href="#获取依赖-比如你在网上找到的别的库或者包" aria-label="Permalink to &quot;获取依赖（比如你在网上找到的别的库或者包）&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> get</span></span></code></pre></div><h3 id="示例-2" tabindex="-1">示例 <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例&quot;">​</a></h3><ol><li>下载名称注册为「github.com/gin-gonic/gin」的依赖包</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> gitHub.com/gin-gonic/gin</span></span></code></pre></div>`,33),b=t('<ol start="2"><li>更新并下载依赖包（尽可能地使用这个方法）</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> get</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> github.com/gin-gonic/gin</span></span></code></pre></div><p><code>-u</code> 参数表示的是「如果有更新，则一并更新到当前代码库，哪怕当前代码库曾经已经添加过该依赖包」</p><p>所以如果你需要更新依赖包的时候，直接用 <code>go get -u</code> 即可</p>',4);function C(y,v,F,m,_,A){const l=a("NolebasePageProperties"),n=a("VPNolebaseInlineLinkPreview"),h=a("NolebaseGitContributors"),o=a("NolebaseGitChangelog");return r(),d("div",null,[g,s(l),u,e("p",null,[i("值得注意的是，这个名称中的 "),s(n,{href:"http://github.com/",target:"_blank",rel:"noreferrer"},{default:k(()=>[i("github.com")]),_:1}),i(" 并不是指从 GitHub 下载 ，而是从名为 gopkg 的网站进行下载，毕竟，依赖也是需要注册才能使用的")]),b,s(h),s(o)])}const q=p(c,[["render",C]]);export{E as __pageData,q as default};
