import{_ as k,c as o,I as a,j as i,a as s,w as t,au as l,D as e,o as d}from"./chunks/framework.RMxno62p.js";const O=JSON.parse('{"title":"监控和串流机器学习的进度，损失和正样本校验数值","description":"","frontmatter":{"tags":["AI","AI/PyTorch","开发/Python/PyTorchLightning","AI/TensorBoard","开发/Python/TensorBoard","开发/Python/wandb","AI/数据集/MNIST"]},"headers":[],"relativePath":"笔记/🤖 AI 人工智能/监控和串流机器学习的进度，损失和正样本校验数值.md","filePath":"笔记/🤖 AI 人工智能/监控和串流机器学习的进度，损失和正样本校验数值.md"}'),c={name:"笔记/🤖 AI 人工智能/监控和串流机器学习的进度，损失和正样本校验数值.md"},g=i("h1",{id:"监控和串流机器学习的进度-损失和正样本校验数值",tabindex:"-1"},[s("监控和串流机器学习的进度，损失和正样本校验数值 "),i("a",{class:"header-anchor",href:"#监控和串流机器学习的进度-损失和正样本校验数值","aria-label":'Permalink to "监控和串流机器学习的进度，损失和正样本校验数值"'},"​")],-1),y=l(`<p>要在 PyTorch 监控和可视化训练时候的各项数据，有这么几种方案。</p><h3 id="使用-pytorch-的-tensorboard-集成" tabindex="-1">使用 PyTorch 的 Tensorboard 集成 <a class="header-anchor" href="#使用-pytorch-的-tensorboard-集成" aria-label="Permalink to &quot;使用 PyTorch 的 Tensorboard 集成&quot;">​</a></h3><p>TensorBoard 原本是给 Tensorflow 用于可视化神经网络训练结果的工具，后来大家都挺喜欢的，PyTorch 有一个专门的输出封装来输出数据给 Tensorboard 进行可视化。</p><p>主要的能力是：</p><ul><li>可视化模型架构</li><li>创建交互式的可视化版本</li><li>记录训练过程中的各种指标（metrics）</li><li>可视化迭代（iteration）过程中的损失（loss）</li><li>检查训练数据</li><li>绘制 Matplotlib 图表</li><li>可视化模型在随机的 minibatch <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>上的预测结果</li></ul><p>基本的用例是这样的：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light one-dark-pro has-diff vp-code" tabindex="0"><code><span class="line diff add"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> torch.utils.tensorboard </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> SummaryWriter </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 默认情况下，SummaryWriter 会输出到 \`runs\` 目录</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 此处我们指定为 runs/fashion_mnist_experiment_1</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">writer </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;"> SummaryWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;runs/fashion_mnist_experiment_1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 在训练的循环函数中可以这样修改</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> epoch </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(num_epochs):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    running_loss </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0.0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> i, data </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> enumerate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(trainloader, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        # 其他的各种训练步骤...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        running_loss </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> loss.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        # 比如每 1000 个 minibatch 之后记录一次</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1000</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 999</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">			# 记录一个名为 training loss 的指标</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            writer.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">add_scalar</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;training loss&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                            running_loss </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                            epoch </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(trainloader) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> i) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            running_loss </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0.0</span></span></code></pre></div><p>然后另起一个命令行窗口，运行 <code>tensorboard --logdir runs/fashion_mnist_experiment_1</code> 就可以启动一个 Tensorboard 服务来托管指标可视化界面了，接下来在浏览器中打开就可以看到<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。</p><h3 id="使用-wandb-weights-biases-的-pytorch-集成" tabindex="-1">使用 wandb（Weights &amp; Biases）的 PyTorch 集成 <a class="header-anchor" href="#使用-wandb-weights-biases-的-pytorch-集成" aria-label="Permalink to &quot;使用 wandb（Weights &amp; Biases）的 PyTorch 集成&quot;">​</a></h3><p>wandb（Weights &amp; Biases） 是另一个最近比较著名和好用的，可以用于可视化训练进度和对比模型效果的工具。</p><p>wandb 可以直接与 PyTorch 混合在一起使用，可以用来记录梯度、度量值、图像等等的各种数据<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>。</p><p>基本的用例是这样的：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light one-dark-pro has-diff vp-code" tabindex="0"><code><span class="line diff add"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> wandb </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 初始化 wandb</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">wandb.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">project</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;my_project&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 其他正常的配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">optimizer </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 如果需要 wandb 自动观察模型变化和梯度的话，可以这样</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">wandb.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(model)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 在训练的循环函数中可以这样修改</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> epoch </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(num_epochs):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> i, data </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> enumerate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(trainloader, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        # 其他的各种训练步骤...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        # 然后在这里记录一下指标</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        wandb.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;loss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: loss, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;accuracy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: accuracy}) </span></span></code></pre></div><p>接下来登录到 wandb（Weights &amp; Biases）界面上就可以远程监控了<sup class="footnote-ref"><a href="#fn3" id="fnref3:1">[3:1]</a></sup>！</p>`,14),f=i("sup",{class:"footnote-ref"},[i("a",{href:"#fn4",id:"fnref4"},"[4]")],-1),B={class:"note custom-block github-alert"},_=i("p",{class:"custom-block-title"},"那 wandb 有替代品吗？",-1),u=i("p",null,null,-1),A=i("code",null,"offline",-1),b=i("code",null,"WANDB_MODE",-1),m=i("code",null,"offline",-1),C=l(`<h3 id="用-pytorch-lightning" tabindex="-1">用 PyTorch Lightning <a class="header-anchor" href="#用-pytorch-lightning" aria-label="Permalink to &quot;用 PyTorch Lightning&quot;">​</a></h3><p>PyTorch Lightning 是对 PyTorch 的轻量封装（封装了 Trainer 和常用的各种函数和类），和 PyTorch 以及 wandb 不同的是，PyTorch Lightning 默认就会输出好几个 Tensorboard 指标（并且支持在分布式场景下使用），用 TensorBoard 或其他支持的可视化面板就可以<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>进行可视化了。</p><p>基本的用例是这样的：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> pytorch_lightning </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> pl</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> LitModel</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">pl</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">LightningModule</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> training_step</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">batch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">batch_idx</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        # training steps here...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        # ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;loss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, loss)</span></span></code></pre></div><p>然后另起一个命令行窗口，运行 <code>tensorboard --logdir lightning_logs</code> 就可以启动一个 Tensorboard 服务来托管指标可视化界面了，接下来在浏览器中打开就可以看到。</p><h2 id="延伸阅读" tabindex="-1">延伸阅读 <a class="header-anchor" href="#延伸阅读" aria-label="Permalink to &quot;延伸阅读&quot;">​</a></h2>`,6),D=i("hr",{class:"footnotes-sep"},null,-1),E={class:"footnotes"},F={class:"footnotes-list"},w={id:"fn1",class:"footnote-item"},T=i("a",{href:"#fnref1",class:"footnote-backref"},"↩︎",-1),P={id:"fn2",class:"footnote-item"},v=i("a",{href:"#fnref2",class:"footnote-backref"},"↩︎",-1),x={id:"fn3",class:"footnote-item"},N=i("a",{href:"#fnref3",class:"footnote-backref"},"↩︎",-1),q=i("a",{href:"#fnref3:1",class:"footnote-backref"},"↩︎",-1),I={id:"fn4",class:"footnote-item"},L=i("a",{href:"#fnref4",class:"footnote-backref"},"↩︎",-1),W={id:"fn5",class:"footnote-item"},S=i("a",{href:"#fnref5",class:"footnote-backref"},"↩︎",-1);function M(V,z,G,H,R,$){const h=e("NolebasePageProperties"),n=e("VPNolebaseInlineLinkPreview"),r=e("NolebaseGitContributors"),p=e("NolebaseGitChangelog");return d(),o("div",null,[g,a(h),y,i("p",null,[s("wandb 确实会很简单，跟随这个 "),a(n,{href:"https://docs.wandb.ai/guides/integrations/pytorch",target:"_blank",rel:"noreferrer"},{default:t(()=>[s("PyTorch | Weights & Biases Documentation")]),_:1}),s(" 教程很快就能集成到现有的代码里面。但是缺点是这个需要串流到公网的 wandb.ai 实例上，不太方便私有云使用"),f,s("。")]),i("div",B,[_,u,i("p",null,[s("Neptune.ai 建议的其他替代品："),a(n,{href:"https://neptune.ai/blog/weights-and-biases-alternatives",target:"_blank",rel:"noreferrer"},{default:t(()=>[s("The Best Weights & Biases Alternatives")]),_:1})]),i("ul",null,[i("li",null,[a(n,{href:"https://www.comet.com/docs/v2/",target:"_blank",rel:"noreferrer"},{default:t(()=>[s("Docs Home - Comet Docs")]),_:1})]),i("li",null,[a(n,{href:"https://github.com/mlflow/mlflow/",target:"_blank",rel:"noreferrer"},{default:t(()=>[s("mlflow/mlflow: Open source platform for the machine learning lifecycle")]),_:1})]),i("li",null,[a(n,{href:"https://clear.ml/",target:"_blank",rel:"noreferrer"},{default:t(()=>[s("ClearML | The Continuous Machine Learning Company")]),_:1})])]),i("p",null,[s("如果真的希望离线使用的话，wandb 有 "),A,s("（离线模式）可以使用，请参考 "),a(n,{href:"https://docs.wandb.ai/guides/technical-faq/general",target:"_blank",rel:"noreferrer"},{default:t(()=>[s("General | Weights & Biases Documentation")]),_:1}),s(" 将 "),b,s(" 配置为 "),m,s(" 即可。")]),i("p",null,[s("Reddit 上讨论的其他替代品："),a(n,{href:"https://www.reddit.com/r/MachineLearning/comments/od8nfi/d_alternatives_to_wb/",target:"_blank",rel:"noreferrer"},{default:t(()=>[s("Alternatives to W&B? : MachineLearning")]),_:1}),s("，另一家巨头 DagsHub 建议的替代品："),a(n,{href:"https://dagshub.com/blog/best-8-experiment-tracking-tools-for-machine-learning-2023/",target:"_blank",rel:"noreferrer"},{default:t(()=>[s("ML Experiment Tracking Tools: Comprehensive Comparison | DagsHub")]),_:1}),s("，当然 LibHunt 上也可以找到其他的信息："),a(n,{href:"https://www.libhunt.com/r/wandb",target:"_blank",rel:"noreferrer"},{default:t(()=>[s("Wandb Alternatives and Reviews")]),_:1}),s("。")])]),C,i("p",null,[a(n,{href:"https://zhuanlan.zhihu.com/p/103630393",target:"_blank",rel:"noreferrer"},{default:t(()=>[s("PyTorch下的Tensorboard 使用 - 知乎")]),_:1})]),a(r),a(p),D,i("section",E,[i("ol",F,[i("li",w,[i("p",null,[a(n,{href:"https://pytorch.org/tutorials/intermediate/tensorboard_tutorial.html",target:"_blank",rel:"noreferrer"},{default:t(()=>[s("https://pytorch.org/tutorials/intermediate/tensorboard_tutorial.html")]),_:1}),s(),T])]),i("li",P,[i("p",null,[a(n,{href:"https://pytorch.org/tutorials/intermediate/tensorboard_tutorial.html",target:"_blank",rel:"noreferrer"},{default:t(()=>[s("https://pytorch.org/tutorials/intermediate/tensorboard_tutorial.html")]),_:1}),s(),v])]),i("li",x,[i("p",null,[a(n,{href:"https://docs.wandb.ai/guides/integrations/pytorch",target:"_blank",rel:"noreferrer"},{default:t(()=>[s("https://docs.wandb.ai/guides/integrations/pytorch")]),_:1}),s(" 和 "),a(n,{href:"https://docs.wandb.ai/tutorials/pytorch",target:"_blank",rel:"noreferrer"},{default:t(()=>[s("https://docs.wandb.ai/tutorials/pytorch")]),_:1}),s(),N,s(),q])]),i("li",I,[i("p",null,[s("在 wandb 的文档 "),a(n,{href:"https://docs.wandb.ai/tutorials/experiments",target:"_blank",rel:"noreferrer"},{default:t(()=>[s("Track experiments | Weights & Biases Documentation")]),_:1}),s(" 中教学过，wandb 的使用要求执行 wandb login 或者填写 wandb API Key 来实现数据共享和串流。 "),L])]),i("li",W,[i("p",null,[a(n,{href:"https://lightning.ai/docs/pytorch/stable/visualize/logging_basic.html",target:"_blank",rel:"noreferrer"},{default:t(()=>[s("https://lightning.ai/docs/pytorch/stable/visualize/logging_basic.html")]),_:1}),s(),S])])])])])}const J=k(c,[["render",M]]);export{O as __pageData,J as default};
